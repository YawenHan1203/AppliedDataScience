## change the number to percentage format with required decimal
percent <- function(x, digits = digits, format = "f", ...) {
if (is.numeric(x)){
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
}
#find the mean values
average.first.rows <- first.rows[,lapply(X=.SD,FUN="mean"),.SDcols=c(age.name,diabetes.name,hypertension.name,kidney.disease.name)]
#find the standard deviation
sd.first.rows <- first.rows[,lapply(X=.SD,FUN="sd"),.SDcols=c(age.name,diabetes.name,hypertension.name,kidney.disease.name)]
#combine mean and sd
summary.first.rows <- rbind(average.first.rows,sd.first.rows)
#round number to 1 decimal place or percentage format
summary.round.age <- summary.first.rows[,lapply(X=.SD,FUN="round.numerics",digits=1),.SDcols=age.name]
summary.round.others <- summary.first.rows[,lapply(X=.SD,FUN="percent",digits=1),.SDcols=c(diabetes.name,hypertension.name,kidney.disease.name)]
#format the final output
summary.first.rows <- cbind(summary.round.age,summary.round.others)
summary.first.rows[,"function":=c("mean","sd")]
setcolorder(summary.first.rows, c(5,1:4))
#show as HTML table
datatable(summary.first.rows,rownames=FALSE)
question.counter <- question.counter + 1
#number of heart.attacks in all records
heart.attack.num <- dat[get(heart.attack.name)==1,.("Num of heart attacks"=.N)]
#number of death in all records
death.num <- dat[get(death.name)==1,.("Num of death"=.N)]
#combine outputs
datatable(cbind(heart.attack.num,death.num), rownames=FALSE)
#number of hospitalization in all records
hospital.num <- dat[get(hospital.name)==1,.("Num of hospital(all)"=.N)]
# FUNCTIONS FOR "COUNT_HOSPITALIZATIONS" CHUNCK
## Count the number of hospitalization view multiple consecutive records as one count
count.spanned.hospital.one.patient <- function(patient.dat,hospital.name) {
hospital.records <- patient.dat[,get(hospital.name)]
count <- 0
#count =1 if first hospital record is 1
if (hospital.records[1]==1){
count <- 1
}
#count increases if other hospitalization records change from 0 to 1
if (length(hospital.records)>1){
for (i in 1:(length(hospital.records)-1)){
if (hospital.records[i]==0 & hospital.records[i+1]==1){
count <- count+1
}
}
}
return (count)
}
# use the function "count.spanned.hospital.one.patient" to count the non-consecutive hospital
# for each patient
hospital.no.consecutive.count <- dat[, .(hospital.no.consecutive = count.spanned.hospital.one.patient(patient.dat=.SD,hospital.name=hospital.name)), by=id.name]
#sum of the hospital non-consecutive count
hospital.no.consecutive.num <- hospital.no.consecutive.count[,.("Num of hospital(non-consecutive)"=sum(hospital.no.consecutive))]
datatable(cbind(hospital.no.consecutive.num,hospital.num), rownames=FALSE)
question.counter <- question.counter + 1
outcomes.name <- c(death.name,heart.attack.name,hospital.name)
#Counting outcomes by usage of ACE Inhibitors
ace.outcome <- dat[, lapply(X = .SD,FUN = "sum",na.rm=TRUE),.SDcols=outcomes.name, by=ace.name]
#Counting outcomes by usage of Beta Blockers
beta.blocker.outcome <- dat[, lapply(X = .SD,FUN = "sum",na.rm=TRUE),.SDcols=outcomes.name, by=beta.blocker.name]
#Counting outcomes by usage of Statins
statin.outcome <- dat[, lapply(X = .SD,FUN = "sum",na.rm=TRUE),.SDcols=outcomes.name, by=statin.name]
datatable(ace.outcome, rownames=FALSE)
datatable(beta.blocker.outcome, rownames=FALSE)
datatable(statin.outcome, rownames=FALSE)
question.counter <- question.counter + 1
#get the last record for each patient
last.rows <- dat[, .SD[.N], by = id.name]
#count the total number of person-years of observations for all patients
person.years.total <- round.numerics(last.rows[,sum(get(t2.name))]/one.year,1)
#count the average number of person-years of observations per patient
person.years.average <- round.numerics(last.rows[,mean(get(t2.name))]/one.year,1)
datatable(data.table("Total person-years"=person.years.total,"Average person-years"=person.years.average), rownames=FALSE)
question.counter <- question.counter + 1
#calculate the time length for each record
dat[,"time_length":=get(t2.name)-get(t1.name)]
## FUNCTION FOR "UTILIZATION" CODE CHUNCK
#compute person-years the patients spend on each medicine -- ACE Inhibitors, Beta Blockers, and Statins, show as datatable
person.years.per.medicine <- function(medicine.name){
#Counting person-years by usage of medicine
medicine.person.years <- dat[, .("Person-years"=lapply(X = .SD,FUN = "sum",na.rm=TRUE)),.SDcols="time_length", by=medicine.name]
#convert to peron-year unit and round to 1 decimal point
medicine.person.years[,"Person-years":= round.numerics(as.numeric(get("Person-years"))/one.year,1)]
#show as HTML table
datatable(medicine.person.years,rownames=FALSE)
}
person.years.per.medicine(ace.name)
person.years.per.medicine(beta.blocker.name)
person.years.per.medicine(statin.name)
question.counter <- question.counter + 1
total.follow.up.time <- last.rows[,sum(get(t2.name))]
#crude event rates for hospitalization
crude.rates.hospital <- dat[get(hospital.name)==1, .("Overall follow-up time"=total.follow.up.time,"Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time)]
#crude event rates for heart attack
crude.rates.heart.attack <- dat[get(heart.attack.name)==1, .("Overall follow-up time"=total.follow.up.time,"Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time)]
#crude event rates for death
crude.rates.death <- dat[get(death.name)==1, .("Overall follow-up time"=total.follow.up.time,"Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time)]
#combine crude rates outcomes together
crude.rates.table <- rbind(crude.rates.hospital,crude.rates.heart.attack,crude.rates.death)
crude.rates.table[,"Outcome":=c("Hospitalization","Heart attack","Death")]
setcolorder(crude.rates.table,c(4,1:3))
#round nums to 1 decimal place
datatable(crude.rates.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
question.counter <- question.counter + 1
##FUNCTION FOR "CRUDE.RATES.ACE" CODE CHUNCK
#compute the given outcome crude rate by the given medication
outcome.crude.rate.by.medication <- function(outcome.name,medication.name){
temp.crude.rate.table <- dat[get(outcome.name)==1, .("Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time), by=medication.name]
return (temp.crude.rate.table)
}
#join three tables by ace
ace.merge.table <- merge(merge(outcome.crude.rate.by.medication(hospital.name,ace.name),
outcome.crude.rate.by.medication(heart.attack.name,ace.name),by=ace.name)
,outcome.crude.rate.by.medication(death.name,ace.name),by=ace.name)
#reset column names
setnames(ace.merge.table,2:7,c("Hospital Count","Hospital CrudeRate","HeartAttack Count", "HeartAttack CrudeRate", "Death Count", "Death CrudeRate"))
#round nums to 1 decimal place
datatable(ace.merge.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
#join three tables by ace
beta.blocker.merge.table <- merge(merge(outcome.crude.rate.by.medication(hospital.name,beta.blocker.name),
outcome.crude.rate.by.medication(heart.attack.name,beta.blocker.name),by=beta.blocker.name)
,outcome.crude.rate.by.medication(death.name,beta.blocker.name),by=beta.blocker.name)
#reset column names
setnames(beta.blocker.merge.table,2:7,c("Hospital Count","Hospital CrudeRate","HeartAttack Count", "HeartAttack CrudeRate", "Death Count", "Death CrudeRate"))
#round nums to 1 decimal place
datatable(beta.blocker.merge.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
#join three tables by ace
statin.merge.table <- merge(merge(outcome.crude.rate.by.medication(hospital.name,statin.name),
outcome.crude.rate.by.medication(heart.attack.name,statin.name),by=statin.name)
,outcome.crude.rate.by.medication(death.name,statin.name),by=statin.name)
#reset column names
setnames(statin.merge.table,2:7,c("Hospital Count","Hospital CrudeRate","HeartAttack Count", "HeartAttack CrudeRate", "Death Count", "Death CrudeRate"))
#round nums to 1 decimal place
datatable(statin.merge.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
question.counter <- question.counter + 1
#compute odds ratio by dividing the rate of outcome while taking medicine to without
ace.odds.ratio <- ace.merge.table[2, c(3,5,7)]/ace.merge.table[1, c(3,5,7)]
#rename columns
setnames(ace.odds.ratio, c("Hospital odds ratio","HeartAttack odds ratio","Death odds ratio"))
ace.odds.ratio[,"Medication":="ace"]
setcolorder(ace.odds.ratio,c(4,1:3))
#round nums to 2 decimal place
datatable(ace.odds.ratio[, lapply(X=.SD, FUN="round.numerics",digits=2)], rownames=FALSE)
#compute odds ratio by dividing the rate of outcome while taking medicine to without
beta.blocker.odds.ratio <- beta.blocker.merge.table[2, c(3,5,7)]/beta.blocker.merge.table[1, c(3,5,7)]
#rename columns
setnames(beta.blocker.odds.ratio, c("Hospital odds ratio","HeartAttack odds ratio","Death odds ratio"))
beta.blocker.odds.ratio[,"Medication":="beta blocker"]
setcolorder(beta.blocker.odds.ratio,c(4,1:3))
#round nums to 2 decimal place
datatable(beta.blocker.odds.ratio[, lapply(X=.SD, FUN="round.numerics",digits=2)], rownames=FALSE)
#compute odds ratio by dividing the rate of outcome while taking medicine to without
statin.odds.ratio <- statin.merge.table[2, c(3,5,7)]/statin.merge.table[1, c(3,5,7)]
#rename columns
setnames(statin.odds.ratio, c("Hospital odds ratio","HeartAttack odds ratio","Death odds ratio"))
statin.odds.ratio[,"Medication":="statin"]
setcolorder(statin.odds.ratio,c(4,1:3))
#round nums to 2 decimal place
datatable(statin.odds.ratio[, lapply(X=.SD, FUN="round.numerics",digits=2)], rownames=FALSE)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, comment="", warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=55), tidy = TRUE)
# Note:  If any of the libraries below generate errors, then use the install.packages function to install them first.
library(prettydoc)
library(data.table)
library(DT)
data.file <- "../Data/Homework 2 Data.csv"
num.lines <- 1000
one.year <- 365.25
max.age <- 110
id.name <- "id"
t1.name <- "begin"
t2.name <- "end"
age.name <- "age"
diabetes.name <- "diabetes"
hypertension.name <- "hypertension"
kidney.disease.name <- "kidney_disease"
ace.name <- "ace"
beta.blocker.name <- "beta.blocker"
statin.name <- "statin"
hospital.name <- "hospital"
heart.attack.name <- "heart.attack"
death.name <- "death"
round.numerics <- function(x, digits){
if(is.numeric(x)){
x <- round(x = x, digits = digits)
}
return(x)
}
dat <- fread(input = data.file, verbose = FALSE)
num.lines <- 1000
question.counter = 0
datatable(data = dat[1:num.lines], rownames = TRUE)
question.counter <- question.counter + 1
dim.dat<-dim(dat)
sprintf("The data has %d rows", dim.dat[1])
sprintf("The data has %d columns.", dim.dat[2])
#find the number of unique ids
unique.patients.num <- unique(dat,by=id.name)[,.N]
sprintf("There are %d unique patients in the data.", unique.patients.num)
dat.columns.name <- names(dat)
cat(dat.columns.name, sep=",",fill=TRUE)
question.counter <- question.counter + 1
#correct the begin time of Death for the patients
dat[death==1, begin:= as.integer(end - 1)]
#reorder the dat by incearsing order of id and beginning time
setorderv(x = dat, cols = c(id.name, t1.name), order = 1)
#get the first records for each patient
first.rows <- dat[, .SD[1], by = id.name]
#Check#1-if there are missing values
begin.check1 <- dat[,.("Check1: # missing value"=sum(is.na(get(t1.name))))]
#Check#2-if all patients begin their record from time 0
begin.check2 <- first.rows[, .("Check2: # non-zero begin"=sum(1*get(t1.name)!=0))]
#Check#3-if "begin time >=0" and "begin time < end time" for all records
begin.check3 <- dat[,.("Check3: # wrong begin range"=sum(!(get(t1.name)>=0 & get(t1.name)<get(t2.name))))]
#combine all the check results
datatable(cbind(begin.check1,begin.check2,begin.check3),rownames=FALSE)
#Check#1-if there are missing values
end.check1 <- dat[,.("Check1: # missing value"=sum(is.na(get(t2.name))))]
#Check#2-if "end time > 0" for all records
end.check2 <- dat[,.("Check2: # wrong end range"=sum(!(get(t2.name)>0)))]
#Check#3- if there are overlap between records for each patient
# FUNCTIONS FOR "END_CHECK" CHUNCK
## Check a single patient result if overlaps occur in records
identify.panel.overlaps.one.patient <- function(patient.dat, t1.name, t2.name) {
n <- patient.dat[, .N]
res <- FALSE
if (n > 1) {
t2.values <- patient.dat[1:(n - 1), get(t2.name)]
overlaps.other.rows <- patient.dat[2:n, get(t1.name) < t2.values]
res <- c(FALSE, overlaps.other.rows)
}
return(res)
}
overlap.name <- "overlap_before"
dat[, eval(overlap.name):=identify.panel.overlaps.one.patient(patient.dat = .SD,
t1.name = t1.name, t2.name = t2.name),by = get(id.name)]
end.check3 <- dat[, .("Check3: # overlaps"= sum(get(overlap.name) == TRUE))]
#Check#4- if there are gap between records for each patient
# FUNCTIONS FOR "END_CHECK" CHUNCK
## Check a single patient result if gaps occur in records
identify.panel.gaps.one.patient <- function(patient.dat, t1.name, t2.name) {
gap.first.row <- (patient.dat[1, get(t1.name) > 0])
n <- patient.dat[, .N]
if (n == 1) {
res <- gap.first.row
}
if (n > 1) {
t2.values <- patient.dat[1:(n - 1), get(t2.name)]
gaps.other.rows <- patient.dat[2:n, get(t1.name) > t2.values]
res <- c(gap.first.row, gaps.other.rows)
}
return(res)
}
gap.name <- "gap_before"
dat <- dat[, eval(gap.name):=identify.panel.gaps.one.patient(patient.dat = .SD,
t1.name = t1.name, t2.name = t2.name),by = get(id.name)]
end.check4 <- dat[, .("Check4: # gaps"= sum(get(gap.name) == TRUE))]
#combine all the check results
datatable(cbind(end.check1,end.check2,end.check3,end.check4),rownames=FALSE)
#Check#1-if there are missing values
age.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(age.name))))]
#Check#2- if "the age in each record" = "the baseline age" for each patient
patient.initial.age <- dat[get(t1.name)==0, get(age.name)]
patient.mean.age <- dat[,.("mean_age"=mean(get(age.name))),by=id.name][,"mean_age"]
age.check2 <- sum(patient.initial.age!=patient.mean.age)
#Check#3 - if the "age>=18" for all patients
age.check3 <- sum(!(patient.initial.age>=18))
#Check#4 - if the "age<=110" for all patients
age.check4 <- sum(!(patient.initial.age<=max.age))
#combine check results
datatable(data.table("Check1: # missing values"=age.check1,"Check2: # different age"=age.check2,"Check3: # age<18"=age.check3, "Check3: # age>110"=age.check4),rownames=FALSE)
#Check#1-if there are missing values
diabetes.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(diabetes.name))))]
#Check#2-if the value either 0 or 1
diabetes.check2 <- dat[,("Check2: # wrong value" = sum(!(get(diabetes.name)==0 | get(diabetes.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=diabetes.check1,"Check2: # wrong value"=diabetes.check2),rownames=FALSE)
#Check#1-if there are missing values
hypertension.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(hypertension.name))))]
#Check#2-if the value either 0 or 1
hypertension.check2 <- dat[,("Check2: # wrong value" = sum(!(get(hypertension.name)==0 | get(hypertension.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=hypertension.check1,"Check2: # wrong value"=hypertension.check2),rownames=FALSE)
#Check#1-if there are missing values
kidney.disease.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(kidney.disease.name))))]
#Check#2-if the value either 0 or 1
kidney.disease.check2 <- dat[,("Check2: # wrong value" = sum(!(get(kidney.disease.name)==0 | get(kidney.disease.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=kidney.disease.check1,"Check2: # wrong value"=kidney.disease.check2),rownames=FALSE)
#Check#1-if there are missing values
ace.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(ace.name))))]
#Check#2-if the value either 0 or 1
ace.check2 <- dat[,("Check2: # wrong value" = sum(!(get(ace.name)==0 | get(ace.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=ace.check1,"Check2: # wrong value"=ace.check2), rownames=FALSE)
#Check#1-if there are missing values
beta.blocker.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(beta.blocker.name))))]
#Check#2-if the value either 0 or 1
beta.blocker.check2 <- dat[,("Check2: # wrong value" = sum(!(get(beta.blocker.name)==0 | get(beta.blocker.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=beta.blocker.check1,"Check2: # wrong value"=beta.blocker.check2), rownames=FALSE)
#get all betablocker values
beta.blocker.values <- unique(dat[,get(beta.blocker.name)])
#change the unvalid betablocker values be 0 or 1
beta.blocker.true <- c("Picked up","Filled","Yes","yeah","True","yes","Utilized")
beta.blocker.false <- c("Not filled","nope","didn't take","no","False","No","N")
dat[get(beta.blocker.name) %in% beta.blocker.true, eval(beta.blocker.name):=1]
dat[get(beta.blocker.name) %in% beta.blocker.false, eval(beta.blocker.name):=0]
#recheck the value either 0 or 1
datatable(dat[,.("Check2: # wrong value" = sum(!(get(beta.blocker.name)==0 | get(beta.blocker.name)==1)))], rownames=FALSE)
#Check#1-if there are missing values
statin.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(statin.name))))]
#Check#2-if the value either 0 or 1
statin.check2 <- dat[,("Check2: # wrong value" = sum(!(get(statin.name)==0 | get(statin.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=statin.check1,"Check2: # wrong value"=statin.check2), rownames=FALSE)
#get all betablocker values
statin.values <- unique(dat[,get(statin.name)])
#change the unvalid statin values be 0 or 1
#statin.true <- c("appt","diabetes","high risk")
#statin.false <- c("","BP Normal","Ask doctor")
statin.missing <- c("appt","diabetes","high risk","","BP Normal","Ask doctor")
#dat[get(statin.name) %in% statin.true, eval(statin.name):=1]
#dat[get(statin.name) %in% statin.false, eval(statin.name):=0]
dat[get(statin.name) %in% statin.missing, eval(statin.name):="missing"]
#recheck the value either 0 or 1
datatable(dat[,.("Check2: # wrong value" = sum(!(get(statin.name)==0 | get(statin.name)==1 | get(statin.name)=="missing")))], rownames=FALSE)
#Check#1-if there are missing values
hospital.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(hospital.name))))]
#Check#2-if the value either 0 or 1
hospital.check2 <- dat[,("Check2: # wrong value" = sum(!(get(hospital.name)==0 | get(hospital.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=hospital.check1,"Check2: # wrong value"=hospital.check2), rownames=FALSE)
#Check#1-if there are missing values
heart.attack.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(heart.attack.name))))]
#Check#2-if the value either 0 or 1
heart.attack.check2 <- dat[,("Check2: # wrong value" = sum(!(get(heart.attack.name)==0 | get(heart.attack.name)==1)))]
#combine check results
datatable(data.table("Check1: # missing values"=heart.attack.check1,"Check2: # wrong value"=heart.attack.check2), rownames=FALSE)
#Check#1-if there are missing values
death.check1 <- dat[,("Check1: # missing value"=sum(is.na(get(death.name))))]
#Check#2-if the value either 0 or 1
death.check2 <- dat[,("Check2: # wrong value" = sum(!(get(death.name)==0 | get(death.name)==1)))]
#Check#3-death only show in the last record
nolast.rows.death.sum <- dat[, lapply(X=.SD[1:.N-1],FUN="sum"),.SDcols=death.name, by=id.name]
death.check3 <- nolast.rows.death.sum[,sum(get(death.name)!=0)]
#combine check results
datatable(data.table("Check1: # missing values"=death.check1,"Check2: # wrong value"=death.check2, "Check3: # death before last record"=death.check3), rownames=FALSE)
question.counter <- question.counter + 1
#get the first records for each patient
first.rows <- dat[get(t1.name)==0,]
# FUNCTIONS FOR "MEAN_CLINICAL_FACTOR" CHUNCK
## change the number to percentage format with required decimal
percent <- function(x, digits = digits, format = "f", ...) {
if (is.numeric(x)){
paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
}
#find the mean values
average.first.rows <- first.rows[,lapply(X=.SD,FUN="mean"),.SDcols=c(age.name,diabetes.name,hypertension.name,kidney.disease.name)]
#find the standard deviation
sd.first.rows <- first.rows[,lapply(X=.SD,FUN="sd"),.SDcols=c(age.name,diabetes.name,hypertension.name,kidney.disease.name)]
#combine mean and sd
summary.first.rows <- rbind(average.first.rows,sd.first.rows)
#round number to 1 decimal place or percentage format
summary.round.age <- summary.first.rows[,lapply(X=.SD,FUN="round.numerics",digits=1),.SDcols=age.name]
summary.round.others <- summary.first.rows[,lapply(X=.SD,FUN="percent",digits=1),.SDcols=c(diabetes.name,hypertension.name,kidney.disease.name)]
#format the final output
summary.first.rows <- cbind(summary.round.age,summary.round.others)
summary.first.rows[,"function":=c("mean","sd")]
setcolorder(summary.first.rows, c(5,1:4))
#show as HTML table
datatable(summary.first.rows,rownames=FALSE)
question.counter <- question.counter + 1
#number of heart.attacks in all records
heart.attack.num <- dat[get(heart.attack.name)==1,.("Num of heart attacks"=.N)]
#number of death in all records
death.num <- dat[get(death.name)==1,.("Num of death"=.N)]
#combine outputs
datatable(cbind(heart.attack.num,death.num), rownames=FALSE)
#number of hospitalization in all records
hospital.num <- dat[get(hospital.name)==1,.("Num of hospital(all)"=.N)]
# FUNCTIONS FOR "COUNT_HOSPITALIZATIONS" CHUNCK
## Count the number of hospitalization view multiple consecutive records as one count
count.spanned.hospital.one.patient <- function(patient.dat,hospital.name) {
hospital.records <- patient.dat[,get(hospital.name)]
count <- 0
#count =1 if first hospital record is 1
if (hospital.records[1]==1){
count <- 1
}
#count increases if other hospitalization records change from 0 to 1
if (length(hospital.records)>1){
for (i in 1:(length(hospital.records)-1)){
if (hospital.records[i]==0 & hospital.records[i+1]==1){
count <- count+1
}
}
}
return (count)
}
# use the function "count.spanned.hospital.one.patient" to count the non-consecutive hospital
# for each patient
hospital.no.consecutive.count <- dat[, .(hospital.no.consecutive = count.spanned.hospital.one.patient(patient.dat=.SD,hospital.name=hospital.name)), by=id.name]
#sum of the hospital non-consecutive count
hospital.no.consecutive.num <- hospital.no.consecutive.count[,.("Num of hospital(non-consecutive)"=sum(hospital.no.consecutive))]
datatable(cbind(hospital.no.consecutive.num,hospital.num), rownames=FALSE)
question.counter <- question.counter + 1
outcomes.name <- c(death.name,heart.attack.name,hospital.name)
#Counting outcomes by usage of ACE Inhibitors
ace.outcome <- dat[, lapply(X = .SD,FUN = "sum",na.rm=TRUE),.SDcols=outcomes.name, by=ace.name]
#Counting outcomes by usage of Beta Blockers
beta.blocker.outcome <- dat[, lapply(X = .SD,FUN = "sum",na.rm=TRUE),.SDcols=outcomes.name, by=beta.blocker.name]
#Counting outcomes by usage of Statins
statin.outcome <- dat[, lapply(X = .SD,FUN = "sum",na.rm=TRUE),.SDcols=outcomes.name, by=statin.name]
datatable(ace.outcome, rownames=FALSE)
datatable(beta.blocker.outcome, rownames=FALSE)
datatable(statin.outcome, rownames=FALSE)
question.counter <- question.counter + 1
#get the last record for each patient
last.rows <- dat[, .SD[.N], by = id.name]
#count the total number of person-years of observations for all patients
person.years.total <- round.numerics(last.rows[,sum(get(t2.name))]/one.year,1)
#count the average number of person-years of observations per patient
person.years.average <- round.numerics(last.rows[,mean(get(t2.name))]/one.year,1)
datatable(data.table("Total person-years"=person.years.total,"Average person-years"=person.years.average), rownames=FALSE)
question.counter <- question.counter + 1
#calculate the time length for each record
dat[,"time_length":=get(t2.name)-get(t1.name)]
## FUNCTION FOR "UTILIZATION" CODE CHUNCK
#compute person-years the patients spend on each medicine -- ACE Inhibitors, Beta Blockers, and Statins, show as datatable
person.years.per.medicine <- function(medicine.name){
#Counting person-years by usage of medicine
medicine.person.years <- dat[, .("Person-years"=lapply(X = .SD,FUN = "sum",na.rm=TRUE)),.SDcols="time_length", by=medicine.name]
#convert to peron-year unit and round to 1 decimal point
medicine.person.years[,"Person-years":= round.numerics(as.numeric(get("Person-years"))/one.year,1)]
#show as HTML table
datatable(medicine.person.years,rownames=FALSE)
}
person.years.per.medicine(ace.name)
person.years.per.medicine(beta.blocker.name)
person.years.per.medicine(statin.name)
question.counter <- question.counter + 1
total.follow.up.time <- last.rows[,sum(get(t2.name))]
#crude event rates for hospitalization
crude.rates.hospital <- dat[get(hospital.name)==1, .("Overall follow-up time"=total.follow.up.time,"Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time)]
#crude event rates for heart attack
crude.rates.heart.attack <- dat[get(heart.attack.name)==1, .("Overall follow-up time"=total.follow.up.time,"Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time)]
#crude event rates for death
crude.rates.death <- dat[get(death.name)==1, .("Overall follow-up time"=total.follow.up.time,"Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time)]
#combine crude rates outcomes together
crude.rates.table <- rbind(crude.rates.hospital,crude.rates.heart.attack,crude.rates.death)
crude.rates.table[,"Outcome":=c("Hospitalization","Heart attack","Death")]
setcolorder(crude.rates.table,c(4,1:3))
#round nums to 1 decimal place
datatable(crude.rates.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
question.counter <- question.counter + 1
##FUNCTION FOR "CRUDE.RATES.ACE" CODE CHUNCK
#compute the given outcome crude rate by the given medication
outcome.crude.rate.by.medication <- function(outcome.name,medication.name){
temp.crude.rate.table <- dat[get(outcome.name)==1, .("Num of events"=.N, "Crude rate"=.N*one.year*100/total.follow.up.time), by=medication.name]
return (temp.crude.rate.table)
}
#join three tables by ace
ace.merge.table <- merge(merge(outcome.crude.rate.by.medication(hospital.name,ace.name),
outcome.crude.rate.by.medication(heart.attack.name,ace.name),by=ace.name)
,outcome.crude.rate.by.medication(death.name,ace.name),by=ace.name)
#reset column names
setnames(ace.merge.table,2:7,c("Hospital Count","Hospital CrudeRate","HeartAttack Count", "HeartAttack CrudeRate", "Death Count", "Death CrudeRate"))
#round nums to 1 decimal place
datatable(ace.merge.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
#join three tables by ace
beta.blocker.merge.table <- merge(merge(outcome.crude.rate.by.medication(hospital.name,beta.blocker.name),
outcome.crude.rate.by.medication(heart.attack.name,beta.blocker.name),by=beta.blocker.name)
,outcome.crude.rate.by.medication(death.name,beta.blocker.name),by=beta.blocker.name)
#reset column names
setnames(beta.blocker.merge.table,2:7,c("Hospital Count","Hospital CrudeRate","HeartAttack Count", "HeartAttack CrudeRate", "Death Count", "Death CrudeRate"))
#round nums to 1 decimal place
datatable(beta.blocker.merge.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
#join three tables by ace
statin.merge.table <- merge(merge(outcome.crude.rate.by.medication(hospital.name,statin.name),
outcome.crude.rate.by.medication(heart.attack.name,statin.name),by=statin.name)
,outcome.crude.rate.by.medication(death.name,statin.name),by=statin.name)
#reset column names
setnames(statin.merge.table,2:7,c("Hospital Count","Hospital CrudeRate","HeartAttack Count", "HeartAttack CrudeRate", "Death Count", "Death CrudeRate"))
#round nums to 1 decimal place
datatable(statin.merge.table[, lapply(X=.SD, FUN="round.numerics",digits=1)], rownames=FALSE)
question.counter <- question.counter + 1
#compute odds ratio by dividing the rate of outcome while taking medicine to without
ace.odds.ratio <- ace.merge.table[2, c(3,5,7)]/ace.merge.table[1, c(3,5,7)]
#rename columns
setnames(ace.odds.ratio, c("Hospital odds ratio","HeartAttack odds ratio","Death odds ratio"))
ace.odds.ratio[,"Medication":="ace"]
setcolorder(ace.odds.ratio,c(4,1:3))
#round nums to 2 decimal place
datatable(ace.odds.ratio[, lapply(X=.SD, FUN="round.numerics",digits=2)], rownames=FALSE)
#compute odds ratio by dividing the rate of outcome while taking medicine to without
beta.blocker.odds.ratio <- beta.blocker.merge.table[2, c(3,5,7)]/beta.blocker.merge.table[1, c(3,5,7)]
#rename columns
setnames(beta.blocker.odds.ratio, c("Hospital odds ratio","HeartAttack odds ratio","Death odds ratio"))
beta.blocker.odds.ratio[,"Medication":="beta blocker"]
setcolorder(beta.blocker.odds.ratio,c(4,1:3))
#round nums to 2 decimal place
datatable(beta.blocker.odds.ratio[, lapply(X=.SD, FUN="round.numerics",digits=2)], rownames=FALSE)
#compute odds ratio by dividing the rate of outcome while taking medicine to without
statin.odds.ratio <- statin.merge.table[2, c(3,5,7)]/statin.merge.table[1, c(3,5,7)]
#rename columns
setnames(statin.odds.ratio, c("Hospital odds ratio","HeartAttack odds ratio","Death odds ratio"))
statin.odds.ratio[,"Medication":="statin"]
setcolorder(statin.odds.ratio,c(4,1:3))
#round nums to 2 decimal place
datatable(statin.odds.ratio[, lapply(X=.SD, FUN="round.numerics",digits=2)], rownames=FALSE)
