melt.table.l1[variable==2,variable:='Momentum']
melt.table.l1[variable==3,variable:='Gravity']
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
melt.table.l2[variable==1,variable:='Mechanics']
melt.table.l2[variable==2,variable:='Momentum']
melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
View(melt.table.l1)
View(melt.table.l2)
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
melt.table.l1[variable==1,variable:='Mechanics']
melt.table.l1[variable==2,variable:='Momentum']
melt.table.l1[variable==3,variable:='Gravity']
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable=i,variable:=col[i]]
}
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
melt.table.l1[variable==1,variable:='Mechanics']
melt.table.l1[variable==2,variable:='Momentum']
melt.table.l1[variable==3,variable:='Gravity']
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable=i,variable:=colA[i]]
}
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
melt.table.l1[variable==1,variable:='Mechanics']
melt.table.l1[variable==2,variable:='Momentum']
melt.table.l1[variable==3,variable:='Gravity']
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
View(melt.table)
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
melt.table[,.(correlation=cor(Score,Time)),by=c("variable","Level")]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
melt.table[,.(correlation=cor(get(Score),get(Time))),by=c("variable","Level")]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
melt.table[,.(correlation=cor(get(Score),get(Time))),by=c("variable","Level")]
melt.table[,c=cor(get(Score),get(Time))]
melt.table[,(c=cor(get(Score),get(Time)))]
melt.table[,.(c=cor(get(Score),get(Time)))]
melt.table[,.(c=cor(get(Score))]
melt.table[,.(c=cor(get(Score)))]
melt.table[,.(c=cor(Score,Time))]
melt.table[,.(c=cor(Score,Time,na.rm=TRUE))]
melt.table[,.(c=cor(Score,Time,use="complete.obs"))]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
melt.table[,.(correlation=cor(Score,Time,use="complete.obs")),by=c("variable","Level")]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
setnames(DT, old = "variable", new = "Topic")
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
setnames(melt.table, old = "variable", new = "Topic")
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
melt.table[,.(correlation=cor(Score,Time,use="complete.obs")),by=c("Topic","Level")]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
setnames(melt.table, old = "variable", new = "Topic")
melt.table[,.(correlation=cor(Score,Time,use="complete.obs")),by=c("Topic","Level")]
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
setnames(melt.table, old = "variable", new = "Topic")
melt.table[,.(correlation=cor(Score,Time,use="complete.obs")),by=c("Topic","Level")]
datatable(melt.table[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
setnames(melt.table, old = "variable", new = "Topic")
melt.corr.table<-melt.table[,.(correlation=cor(Score,Time,use="complete.obs")),by=c("Topic","Level")]
datatable(melt.corr.table[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
library(knitr)
opts_chunk$set(echo = TRUE, eval = TRUE, comment="", warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=55), tidy = TRUE)
# Note:  If loading any of the libraries below generates an error, then use the install.packages function to install them first.
library(prettydoc)
library(data.table)
library(DT)
## Any constant variables may be specified here.
num.digits <- 2
id.name <- "Student ID"
file.pk <- "../Data/Prior Courses.csv"
file.kc1 <- "../Data/Knowledge Check -- Level 2.csv"
file.kc2 <- "../Data/Knowledge Check -- Level 5.csv"
file.grades <- "../Data/Grades.csv"
pk.level.name <- "Prior Knowledge Level"
trig.name <- "Trigonometry"
calc.name <- "Calculus"
threshold.kc1 <- 2
threshold.kc2 <- 5
## Any code contained in separate files (with a .R extension) can be called here using the source command.
# Use this function within data.table calls, e.g. dat[, lapply(X = .SD, FUN = "round.numerics", digits = 1)] to round all numeric columns to the specified number of digits.
max.with.na <- function(x){
y <- as.numeric(x[!is.na(as.numeric(x))])
if(length(y) == 0){
return(NA_real_)
}
if(length(y) > 0){
return(x = max(y, na.rm = TRUE))
}
}
round.numerics <- function(x, digits){
if(is.numeric(x)){
x <- round(x = x, digits = digits)
}
return(x)
}
display.multiple.records <- function(dat) {
#group the table by id
group<-dat[,.N,by=id.name]
#find the duplicated ids
duplicate<-group[N>=2,(duplicated=get(id.name))]
#show the multi ids
mult<-dat[get(id.name) %in% duplicate]
#reorder
setorderv(x = mult,cols=id.name, order=1)
#show as HTML table
datatable(mult)
}
question.counter <- 1
data.pk<-fread(input=file.pk)
data.grades<-fread(input=file.grades)
data.kc1<-fread(input=file.kc1)
data.kc2<-fread(input=file.kc2)
dim.pk<-dim(data.pk)
sprintf("Prior Knowledge File has %d rows, and  %d columns.", dim.pk[1],dim.pk[2])
dim.kc1<-dim(data.kc1)
sprintf("Knowledge Check 1 File has %d rows, and  %d columns.", dim.kc1[1],dim.kc1[2])
dim.kc2<-dim(data.kc2)
sprintf("Knowledge Check 2 File has %d rows, and  %d columns.", dim.kc2[1],dim.kc2[2])
dim.grades<-dim(data.grades)
sprintf("Grades File has %d rows, and  %d columns.", dim.grades[1],dim.grades[2])
#combine the student id columns from all input files
combined.id = rbind(data.pk[,.(get(id.name))],data.kc1[,.(get(id.name))],data.kc2[,.(get(id.name))],data.grades[,.(get(id.name))])
#find the number of unique ids
unique.students.num <- unique(combined.id)[,.N]
sprintf("%d unique students were in the class.", unique.students.num )
question.counter <- question.counter + 1
#the display.multiple.records are located at the function code chunck
display.multiple.records(dat = data.pk)
display.multiple.records(dat = data.kc1)
display.multiple.records(dat = data.kc2)
display.multiple.records(dat = data.grades)
question.counter <- question.counter + 1
summarize.pk.class <- function(dat,class) {
#add the new column with the numeric and missing value version of the required class
the.missing <- sprintf("%s_%s","missing", class)
dat[, eval(the.missing):= as.numeric(dat[,get(class)])]
#the number of measured records
num.recordes<-sum(1* !is.na(dat[,get(the.missing)]))
#the number of unique students with a measured record
num.unique.records<-sum(1*!is.na(unique(dat,by=id.name)[,get(the.missing)]))
#the average score among all of the measured records
mean<-dat[,mean(x = get(the.missing), na.rm = TRUE)]
#the standard deviation of the scores among all of the measured records
stdev<-dat[,sd(x = get(the.missing), na.rm = TRUE)]
#show as the HTML format
summary<-data.table(Class=class,NumRecord=num.recordes,NumUniqueRecord=num.unique.records,Mean=round.numerics(mean,2),Stdev=round.numerics(stdev,2))
datatable(summary)
}
summarize.pk.class(data.pk,"Trigonometry")
summarize.pk.class(data.pk,"Calculus")
#get the unique ids
ids<-unique(data.pk,by=id.name)[,get(id.name)]
#create the pk.reduced table
pk.reduced<-data.table("Student ID"=ids,Trigonometry=1:length(ids),Calculus=1:length(ids))
#apply the max.with.na function to pk.reduced table
for (i in 1:length(ids)){
temp.tri<-max.with.na(data.pk[get(id.name)==ids[i],Trigonometry])
temp.cal<-max.with.na(data.pk[get(id.name)==ids[i],Calculus])
pk.reduced[get(id.name)==ids[i],Trigonometry:=temp.tri]
pk.reduced[get(id.name)==ids[i],Calculus:=temp.cal]
}
#get the duplicated ids
duplicated.ids<-data.pk[,.N,by=id.name][N>=2,get(id.name)]
datatable(pk.reduced[get(id.name) %in% duplicated.ids,])
summarize.pk.class(pk.reduced,"Trigonometry")
summarize.pk.class(pk.reduced,"Calculus")
#manipulate the non-NA
pk.reduced[!is.na(Trigonometry),PriorLevel:=.((Trigonometry+Calculus)/2.0)]
#manipulate the NAs
pk.reduced[is.na(Trigonometry),PriorLevel:=.(Calculus)]
summarize.pk.class(pk.reduced,"PriorLevel")
#remove some temp columns
pk.reduced[,missing_Trigonometry:=NULL]
pk.reduced[,missing_Calculus:=NULL]
pk.reduced[,missing_PriorLevel:=NULL]
question.counter <- question.counter + 1
#merge tables as instructions
merge.table<-merge(merge(merge(pk.reduced,data.kc1,by=id.name,sort=FALSE),data.kc2,by=id.name,sort=FALSE),data.grades,by=id.name,sort=FALSE)
#setnames(merge.table,grep(pattern = ".x", x = names(merge.table)),c("Mechanics_l2","Momentum_l2","Gravity_l2"))
#round numerics and set to datatabel output
datatable(merge.table[, lapply(X = .SD, FUN = "round.numerics",digits = 2)])
question.counter <- question.counter + 1
summary.func<-function(dat,topic,level){
temp.topic.minute<-paste("Time: ",topic,sep="")
dat[,.(Topic=topic,Num=sum(1*(!is.na(get(topic)))),Mean_score=mean(get(topic),na.rm=TRUE),Sd_score=sd(get(topic),na.rm=TRUE),Perc_2=100*dat[get(topic)>=level,.N]/sum(1*(!is.na(get(topic)))),Mean_min=mean(get(temp.topic.minute),na.rm=TRUE),Sd_min=sd(get(temp.topic.minute),na.rm=TRUE))]
}
summary.kc1<-rbind(summary.func(data.kc1,"Mechanics",2),summary.func(data.kc1,"Momentum",2),summary.func(data.kc1,"Gravity",2))
datatable(summary.kc1[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
question.counter <- question.counter + 1
summary.kc2<-rbind(summary.func(data.kc2,"Mechanics",5),summary.func(data.kc2,"Momentum",5),summary.func(data.kc2,"Gravity",5))
datatable(summary.kc2[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
question.counter <- question.counter + 1
# level 1
colA=c("Mechanics","Momentum","Gravity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity")
melt.table.l1<-melt(data=data.kc1,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l1[variable==i,variable:=colA[i]]
}
melt.table.l1[,Level:=1]
#level 2
colA=c("Mechanics","Momentum","Gravity","Electricity","Magnetism","Relativity")
colB=c("Time: Mechanics","Time: Momentum","Time: Gravity","Time: Electricity","Time: Magnetism","Time: Relativity")
melt.table.l2<-melt(data=data.kc2,measure.vars=list(colA,colB),value.name = c("Score","Time"))
for (i in 1:length(colA)){
melt.table.l2[variable==i,variable:=colA[i]]
}
#melt.table.l2[variable==1,variable:='Mechanics']
#melt.table.l2[variable==2,variable:='Momentum']
#melt.table.l2[variable==3,variable:='Gravity']
melt.table.l2[,Level:=2]
#merge two tables from level 1 and level 2 together
melt.table<-rbind(melt.table.l1,melt.table.l2)
setnames(melt.table, old = "variable", new = "Topic")
melt.corr.table<-melt.table[,.(correlation=cor(Score,Time,use="complete.obs")),by=c("Topic","Level")]
datatable(melt.corr.table[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
question.counter <- question.counter + 1
# function for summary_of_scores code chunck
grades.summary.func<-function(dat,topic){
dat[,.(Topic=topic,Num=sum(1*(!is.na(get(topic)))),Mean_score=mean(get(topic),na.rm=TRUE),Sd_score=sd(get(topic),na.rm=TRUE))]
}
# get column names
columns.names <- names(data.grades)
# creare table
summary.grades<-grades.summary.func(data.grades,columns.names[2])
# generate summary_of_scores table
for (i in 3:length(columns.names)){
summary.grades<-rbind(summary.grades,grades.summary.func(data.grades,columns.names[i]))
}
# show table as HTML
datatable(summary.grades[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
question.counter <- question.counter + 1
#generate HW_mean for homework average scores
hw.grades.index<-grep(pattern = "HW", x = names(merge.table))
merge.table[, HW_mean := rowMeans(.SD), by = id.name, .SDcols = hw.grades.index]
#generate Total_time for total minutes apent on the knowledge check activities
kc.time.index<-grep(pattern = "Time:", x = names(merge.table))
for(j in kc.time.index){ ##set the na as 0
set(merge.table, i = which(is.na(merge.table[[j]])), j = j, value = 0)
}
merge.table[, Total_time := rowSums(.SD), by = id.name, .SDcols = kc.time.index]
#generate kc_l2_mean for average score on the Level 2 knowledge checks
start<-which(colnames(merge.table)=="Mechanics.y")
end<-which(colnames(merge.table)=="Relativity")
merge.table[, kc_l2_mean := rowMeans(.SD,na.rm = TRUE), by = id.name, .SDcols = start:end]
#get the variables for 1st columns
corr.row.names<-c("HW_mean","Midterm","Final Exam","Total Score")
#get the variables for 2nd columns
corr.column.names<-c("PriorLevel","Total_time","kc_l2_mean")
corr.table<-data.table()#initialize the correlation table
#corr.table<-merge.table[,.(var1=corr.row.names[1],var2=corr.column.names[1],corr=cor(get(corr.row.names[1]),get(corr.column.names[1])))]
# genertae the correlation table
for (i in corr.row.names){
for (j in corr.column.names){
corr.table<-rbind(corr.table,merge.table[,.(var1=i,var2=j,corr=cor(get(i),get(j)))])
}
}
datatable(corr.table[, lapply(X = .SD, FUN = "round.numerics",digit=2)])
question.counter <- question.counter + 1
