plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+ xlab(col.name[i])
print(plot)
}
dat[,class(SeniorCitizen)]
dat[,class(col.name[2])]
dat[,class(col.name[21])]
dat[,class(get(col.name[21]))]
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge',alpha=0.5)+labs(title = col.name[i])
}
print(plot)
}
dat[,get(col.name[2])]
dat[,get(col.name[10])]
dat[,get(col.name[19])]
max(dat[,get(col.name[19])])
min(dat[,get(col.name[19])])
(13-2.5)/2
int((13-2.5)/2)
as.integer((13-2.5)/2)
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
value <- dat[,get(col.name[i])]
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
bw <- as.integer((max(value)-min(value))/10)
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge',alpha=0.8,binwidth = bw)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
value <- dat[,get(col.name[i])]
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
bw <- as.integer((max(value)-min(value))/10)
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge',alpha=0.8,binwidth = bw)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
value <- dat[,get(col.name[i])]
value
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
bw <- as.integer((max(value)-min(value))/10)
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge',alpha=0.8,binwidth = bw)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
value <- dat[,get(col.name[i])]
value
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
#bw <- as.integer((max(value)-min(value))/10)
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge',alpha=0.8,binwidth = bw)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
value <- dat[,get(col.name[i])]
value
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(value,fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
bw <- as.integer((max(value)-min(value))/10)
plot<-ggplot(dat, aes(value,fill=Churn))+geom_histogram(position='dodge',alpha=0.8,binwidth = bw)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(position='dodge',alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(position='identity',alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(position="identity",alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
# plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
# plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(data.table)
set.seed(1)
dat <- fread(input = "WA_Fn-UseC_-Telco-Customer-Churn.csv", verbose = FALSE)
# change the class of columns from char to factor
changeCols <- colnames(dat)[which(as.vector(dat[,lapply(.SD, class)]) == "character")]
dat[,(changeCols):= lapply(.SD, as.factor), .SDcols = changeCols]
# get the summary of each column
summary(dat)
# convert SeniorCitizen as a binary class with two levels 'yes' and 'no'
dat[,SeniorCitizen:=factor(SeniorCitizen, levels=c(0,1), labels=c("No", "Yes"))]
# check the class of SeniorCitizen
summary(dat[,.(SeniorCitizen)])
# check missing values
sapply(dat,function(x)sum(is.na(x)))
# delete missing records
# omit rows where 'x' has a missing value
dat <- na.omit(dat, cols="TotalCharges")
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
# plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(data.table)
set.seed(1)
dat <- fread(input = "WA_Fn-UseC_-Telco-Customer-Churn.csv", verbose = FALSE)
# change the class of columns from char to factor
changeCols <- colnames(dat)[which(as.vector(dat[,lapply(.SD, class)]) == "character")]
dat[,(changeCols):= lapply(.SD, as.factor), .SDcols = changeCols]
# get the summary of each column
summary(dat)
# convert SeniorCitizen as a binary class with two levels 'yes' and 'no'
dat[,SeniorCitizen:=factor(SeniorCitizen, levels=c(0,1), labels=c("No", "Yes"))]
# check the class of SeniorCitizen
summary(dat[,.(SeniorCitizen)])
# check missing values
sapply(dat,function(x)sum(is.na(x)))
# delete missing records
# omit rows where 'x' has a missing value
dat <- na.omit(dat, cols="TotalCharges")
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
# plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
i
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "character"){
# plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
#plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
#if (dat[,class(get(col.name[i]))] == "character"){
# plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
# }else{
#plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
dat[,class(get(col.name[2]))]
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "factor"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
if (dat[,class(get(col.name[i]))] == "factor"){
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
plot<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8,bins=20)+labs(title = col.name[i])+xlab("")
}
print(plot)
}
indexes <- sample(1:nrow(dat), size=0.3*nrow(churn))
indexes <- sample(1:nrow(dat), size=0.3*nrow(dat))
test <- dat[indexes,]
train <- dat[-indexes,]
dim(dat)
dim(test)
dim(train)
train[,1:20]
dim(train[,1:20])
model <- gbm(Churn ~ ., data=train[,1:20], distribution="bernoulli", cv.folds=5)
library(gbm)
model <- gbm(Churn ~ ., data=train[,1:20], distribution="bernoulli", cv.folds=5)
library(gbm)
model <- gbm(Churn ~ ., data=train, distribution="bernoulli", cv.folds=5)
library(gbm)
model <- gbm(Churn ~ ., data=train[2:], distribution="bernoulli", cv.folds=5)
library(gbm)
model <- gbm(Churn ~ ., data=train[2:,], distribution="bernoulli", cv.folds=5)
library(gbm)
model <- gbm(Churn ~ ., data=train[2:21,], distribution="bernoulli", cv.folds=5)
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="bernoulli", cv.folds=5)
data=train[,2:21]
train[,2:21]
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
model
predict(model, newdata=test[2:20], n.trees=100, type = "response")
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test[,2:20], n.trees=100, type = "response")
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest
predTest
predict(model, newdata=test[,2:20], n.trees=100)
max.col(dat)
max.col(predTest)
predTest
predTest[,1]>0.5
predTest[,1]
predTest
class(predTest)
as.data.table(predTest)
as.data.frame(predTest)
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test[,2:20], n.trees=100, type = "response")
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test[,2:20], n.trees=100, type = "response")
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
predTest
mean(predTest == test[,Churn])
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test[,2:20], n.trees=100, type = "response")
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test[,2:20], n.trees=100, type = "response")
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,Churn])
library(gbm)
model <- gbm(Churn ~ ., data=train[,2:21], distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test[,2:20], n.trees=100, type = "response")
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == test[,Churn])
accuracy
confusionMatrix(data = predTest, reference = train[,Churn])
library(randomForest)
model <- randomForest(formula = Churn~. , data=train[,2:21])
# Predicting on Validation set
predTest <- predict(model, test[,2:20], type = "response")
library(randomForest)
#model <- randomForest(formula = Churn~. , data=train[,2:21])
# Predicting on Validation set
#predTest <- predict(model, test[,2:20], type = "response")
library(randomForest)
model <- randomForest(formula = Churn~. , data=train[,2:21])
# Predicting on Validation set
#predTest <- predict(model, test[,2:20], type = "response")
confusionMatrix(data = predTest, reference = train[,Churn])
model
predict(model, test[,2:20], type = "response")
library(randomForest)
model <- randomForest(formula = Churn~. , data=train[,2:21])
# Predicting on Validation set
#predTest <- predict(model, test[,2:20], type = "response")
mean(predTest == test[,Churn])
library(randomForest)
model <- randomForest(formula = Churn~. , data=train[,2:21],importance=TRUE)
# Predicting on Validation set
predTest <- predict(model, test[,2:20], type = "response")
importance(model)
importance(model)
install.packages("corrplot")
library(randomForest)
model <- randomForest(formula = Churn~. , data=train[,2:21],importance=TRUE)
# Predicting on Validation set
predTest <- predict(model, test[,2:20], type = "response")
# Checking classification accuracy
accuracy <- mean(predTest == test[,Churn])
accuracy
install.packages("cowplot")
library(ggplot2)
col.name<-colnames(dat)
grid.arrange(
# get column names
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
# bar chart for categorical variables
if (dat[,class(get(col.name[i]))] == "factor"){
ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
# histogram for continuous variables
ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8,bins=20)+labs(title = col.name[i])+xlab("")
}
}
)
library(ggplot2)
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
name<-paste0("plot",i)
# bar chart for categorical variables
if (dat[,class(get(col.name[i]))] == "factor"){
name<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab("")
}else{
# histogram for continuous variables
name<-ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8,bins=20)+labs(title = col.name[i])+xlab("")
}
}
View(name)
library(ggplot2)
myplots <- list()
m<-1
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
# bar chart for categorical variables
if (dat[,class(get(col.name[i]))] == "factor"){
plots[[m]]<-eval(substitute(ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab(""),list(i = i)))
}else{
# histogram for continuous variables
plots[[m]]<-eval(substitute(ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8,bins=20)+labs(title = col.name[i])+xlab(""),list(i = i)))
}
m <- m+1
}
library(ggplot2)
myplots <- list()
m<-1
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
# bar chart for categorical variables
if (dat[,class(get(col.name[i]))] == "factor"){
myplots[[m]]<-eval(substitute(ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab(""),list(i = i)))
}else{
# histogram for continuous variables
myplots[[m]]<-eval(substitute(ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8,bins=20)+labs(title = col.name[i])+xlab(""),list(i = i)))
}
m <- m+1
}
multiplot(plotlist = myplots, cols = 4)
library(ggplot2)
myplots <- list()
m<-1
# get column names
col.name<-colnames(dat)
# plot the bar chart for all columns grouped by Churn
for(i in 2:ncol(dat)){
# bar chart for categorical variables
if (dat[,class(get(col.name[i]))] == "factor"){
myplots[[m]]<-eval(substitute(ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_bar(position='dodge')+labs(title = col.name[i])+xlab(""),list(i = i)))
}else{
# histogram for continuous variables
myplots[[m]]<-eval(substitute(ggplot(dat, aes(dat[,get(col.name[i])],fill=Churn))+geom_histogram(alpha=0.8,bins=20)+labs(title = col.name[i])+xlab(""),list(i = i)))
}
m <- m+1
}
multiplot(plotlist = myplots, cols = 4)
myplots[1]
myplots[2]
myplots[20]
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
multiplot()
multiplot()
install_github("easyGgplot2", "kassambara")
library(devtools)
install_github("easyGgplot2", "kassambara")
install.packages("ggpubr")
ggarange
plot_grid
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
