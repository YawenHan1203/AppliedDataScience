library(extracat)
visna(dogs, sort = "b")
missing_gender<-dogs %>% group_by(gender) %>% summarise(total=sum(is.na(dog_name)),n=n())
missing_gender$percentage<-missing_gender$total/missing_gender$n
ggplot(missing_gender)+geom_bar(aes(x=fct_reorder(gender,percentage,.desc=TRUE),y=percentage),stat='identity')+ggtitle("Dog names missing percentage by gender")+xlab("gender")+ylab("missing percentage")+ylim(c(0,0.08))
missing_group<-dogs %>% group_by(Group) %>% summarise(total=sum(is.na(dog_name)),n=n())
missing_group$percentage<-missing_group$total/missing_group$n
ggplot(missing_group)+geom_bar(aes(x=fct_reorder(Group,percentage,.desc=TRUE),y=percentage),stat='identity')+ggtitle("Dog names missing percentage by group")+xlab("group")+ylab("missing percentage")+ylim(c(0,0.08))
missing_borough<-dogs %>% group_by(borough) %>% summarise(total=sum(is.na(dog_name)),n=n())
missing_borough$percentage<-missing_borough$total/missing_borough$n
ggplot(missing_borough)+geom_bar(aes(x=fct_reorder(borough,percentage,.desc=TRUE),y=percentage),stat='identity')+ggtitle("Dog names missing percentage by borough")+xlab("borough")+ylab("missing percentage")+ylim(c(0,0.08))
library(stringr)
dogs$month<-str_extract(dogs$birth, "[a-zA-Z]+")#extract birth "month" from the "birth"
dogs$year<-str_extract_all(dogs$birth,"\\d+")#extract birth "year"" from the "birth"
dogs$year<-str_pad(dogs$year, 2, pad = "0")
dogs$day<-rep("01",length(dogs$birth))#use “01” for the birth "day"" since it’s not provided
dogs$birth<-str_c(dogs$month,dogs$day,dogs$year,sep="-") #combine "month"，“day” and "year" together as the "birth" column
dogs$birth <- as.Date(dogs$birth,format = "%b-%d-%y")#Convert the birth column of the NYC dogs dataset to Date class
class(dogs$birth)
library(lubridate)
hist(dogs$birth, "months", freq = TRUE)
wrong_year<-year(dogs$birth[which(dogs$birth>as.Date("2018-01-01"), arr.ind=TRUE)])#find out the wrong year transformed by lubridate
year(dogs$birth[which(dogs$birth>as.Date("2018-01-01"), arr.ind=TRUE)])<-wrong_year-100#correct the wrong years
hist(dogs$birth, "month", freq = TRUE)
dogs_new<-dogs$birth[which(dogs$birth>as.Date("1990-01-01"), arr.ind=TRUE)]
hist(dogs_new, "years", freq = TRUE)
#factor(dogs$dominant_color)
ggplot(dogs, aes(x=reorder(dominant_color,dominant_color,function(x)-length(x))))+geom_bar(color="black",fill="lightblue")+ggtitle("Frequency bar chart for the color")+xlab("")+theme(axis.text.x=element_text(angle=30,hjust=1))
#factor(dogs$dominant_color)
ggplot(dogs, aes(x=reorder(Group,Group,function(x)-length(x))))+geom_bar(color="black",fill="lightblue")+ggtitle("Frequency bar chart for the color")+xlab("")+theme(axis.text.x=element_text(angle=30,hjust=1))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 6.5),gp_varnames = gpar(fontsize = 9,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
dogs_no_other<-dogs[-c(which(!dogs$dominant_color %in% max_color)),]
fillcolors2 <- c("gray30","white","lightsalmon4","tan1","gold")
dogs_no_other$new_dominant_color<-factor(dogs_no_other$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND"))
dogs_no_other$Group<-factor(dogs_no_other$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs_no_other, gp = gpar(fill = fillcolors2), tl_labels = c(TRUE, TRUE),direction = c("v", "h"), labeling = labeling_border(gp_labels = gpar(fontsize = 7),gp_varnames = gpar(fontsize = 9,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.7,0,0,2.4), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
# group the gods data to fulfill the zip_choropleth requirement
dogs_table<-dogs %>% select(zip_code,spayed_or_neutered)
dogs_table$spayed_or_neutered<-ifelse(dogs_table$spayed_or_neutered=='Yes',1,0)
dogs_summary<-dogs_table%>% group_by(zip_code) %>%summarise(total=sum(as.numeric(spayed_or_neutered)),n=n())
# calculate percentage
dogs_summary$value<-dogs_summary$total/dogs_summary$n
dogs_summary<-rename(dogs_summary,"region"="zip_code")
dogs_summary <- select(dogs_summary, -c("total","n"))
# change class
dogs_summary$region<-as.character(dogs_summary$region)
dogs_summary$value<-as.numeric(dogs_summary$value)
library(devtools)
library(choroplethr)
library(choroplethrZip)
nyc_fips = c("36005", "36047", "36061", "36081", "36085")
#a<-c(unlist(dogs_summary$region))
zip_choropleth(dogs_summary,county_zoom = nyc_fips,
title       = "Percent spayed or neutered dogs by zip code",
legend      = "Percentage")
library(tidyquant)
# set stock and dates
first.date <- '2015-01-01'
last.date <-  Sys.Date()
# get data with tq_get
apple_stock <- tq_get('AAPL',get = "stock.prices", from = first.date, to = last.date)
amazon_stock <- tq_get('AMZN',get = "stock.prices", from = first.date, to = last.date)
google_stock <- tq_get('GOOG',get = "stock.prices", from = first.date, to = last.date)
netflix_stock <- tq_get('NFLX',get = "stock.prices", from = first.date, to = last.date)
# tidy data
aagn =data.frame(date= apple_stock$date,apple=apple_stock$close , amazon=amazon_stock$close,google=google_stock$close,netflix=netflix_stock$close)
aagn_tidy<-aagn %>%gather(key,value, -date)
# plot line chart
ggplot(aagn_tidy,aes(x=date, y=value, colour=key)) + geom_line()+labs(title = "Closing price of four tech stocks,2015-1018", y = "Closing Price", x = "Date") + theme_tq(12)
aagn_scale <- aagn_tidy %>% group_by(key) %>%
mutate(index = round(100*value/value[1], 2)) %>%
ungroup()
# plot line chart
ggplot(aagn_scale,aes(x=date, y=index, colour=key)) + geom_line()+labs(title = "Scaled:closing price of four tech stocks,2015-2018", y = "Closing Price", x = "Date") + theme_tq(12)
library(scales)
dogs_ts<-dogs%>% group_by(year(dogs$birth)) %>%summarise(n=n())
dogs_ts<-rename(dogs_ts,"year"="year(dogs$birth)")
dogs_ts<-dogs_ts[which(dogs_ts$year>=2000 & dogs_ts$year<=2011),]
# plot line chart
ggplot(dogs_ts,aes(x=as.numeric(year), y=n)) + geom_line()+labs(title = "Total borned dogs in NYC with year,2000-2011", y ="Total amount", x = "") + scale_x_continuous(breaks=c(2000:2011),labels=c(2000:2011))+theme_bw(13)+ scale_y_continuous(labels = scientific)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# load data from csv file
dogs <- read_csv("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R Code/HW03/NYCdogs.csv")
# transform missing value as "NA"
dogs[dogs == 'n/a'] <- NA
# find out the missing count and percentage
colNa <- data.frame(colSums(is.na(dogs)) %>% sort(decreasing = TRUE))
colnames(colNa) <- c("countNa")
colNa$features <- rownames(colNa)
colNa$percentNa <- colNa$countNa/length(dogs$dog_name)*100
# plot the barchart of percent missing by features with a decreasing order
ggplot(colNa,aes(x=fct_reorder(features,percentNa,.desc=TRUE),y=percentNa))+geom_bar(color="black",fill="lightblue",stat="identity")+theme(axis.text.x=element_text(angle=25,hjust=1))+ylab("percentage(%)")+ggtitle("Percent missing by features")+xlab("")
library(extracat)
visna(dogs, sort = "b")
missing_gender<-dogs %>% group_by(gender) %>% summarise(total=sum(is.na(dog_name)),n=n())
missing_gender$percentage<-missing_gender$total/missing_gender$n
ggplot(missing_gender)+geom_bar(aes(x=fct_reorder(gender,percentage,.desc=TRUE),y=percentage),stat='identity')+ggtitle("Dog names missing percentage by gender")+xlab("gender")+ylab("missing percentage")+ylim(c(0,0.08))
missing_group<-dogs %>% group_by(Group) %>% summarise(total=sum(is.na(dog_name)),n=n())
missing_group$percentage<-missing_group$total/missing_group$n
ggplot(missing_group)+geom_bar(aes(x=fct_reorder(Group,percentage,.desc=TRUE),y=percentage),stat='identity')+ggtitle("Dog names missing percentage by group")+xlab("group")+ylab("missing percentage")+ylim(c(0,0.08))
missing_borough<-dogs %>% group_by(borough) %>% summarise(total=sum(is.na(dog_name)),n=n())
missing_borough$percentage<-missing_borough$total/missing_borough$n
ggplot(missing_borough)+geom_bar(aes(x=fct_reorder(borough,percentage,.desc=TRUE),y=percentage),stat='identity')+ggtitle("Dog names missing percentage by borough")+xlab("borough")+ylab("missing percentage")+ylim(c(0,0.08))
library(stringr)
dogs$month<-str_extract(dogs$birth, "[a-zA-Z]+")#extract birth "month" from the "birth"
dogs$year<-str_extract_all(dogs$birth,"\\d+")#extract birth "year"" from the "birth"
dogs$year<-str_pad(dogs$year, 2, pad = "0")
dogs$day<-rep("01",length(dogs$birth))#use “01” for the birth "day"" since it’s not provided
dogs$birth<-str_c(dogs$month,dogs$day,dogs$year,sep="-") #combine "month"，“day” and "year" together as the "birth" column
dogs$birth <- as.Date(dogs$birth,format = "%b-%d-%y")#Convert the birth column of the NYC dogs dataset to Date class
class(dogs$birth)
library(lubridate)
hist(dogs$birth, "months", freq = TRUE)
wrong_year<-year(dogs$birth[which(dogs$birth>as.Date("2018-01-01"), arr.ind=TRUE)])#find out the wrong year transformed by lubridate
year(dogs$birth[which(dogs$birth>as.Date("2018-01-01"), arr.ind=TRUE)])<-wrong_year-100#correct the wrong years
hist(dogs$birth, "month", freq = TRUE)
dogs_new<-dogs$birth[which(dogs$birth>as.Date("1990-01-01"), arr.ind=TRUE)]
hist(dogs_new, "years", freq = TRUE)
#factor(dogs$dominant_color)
ggplot(dogs, aes(x=reorder(dominant_color,dominant_color,function(x)-length(x))))+geom_bar(color="black",fill="lightblue")+ggtitle("Frequency bar chart for the color")+xlab("")+theme(axis.text.x=element_text(angle=30,hjust=1))
#factor(dogs$dominant_color)
ggplot(dogs, aes(x=reorder(Group,Group,function(x)-length(x))))+geom_bar(color="black",fill="lightblue")+ggtitle("Frequency bar chart for the color")+xlab("")+theme(axis.text.x=element_text(angle=30,hjust=1))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 6.5),gp_varnames = gpar(fontsize = 9,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
dogs_no_other<-dogs[-c(which(!dogs$dominant_color %in% max_color)),]
fillcolors2 <- c("gray30","white","lightsalmon4","tan1","gold")
dogs_no_other$new_dominant_color<-factor(dogs_no_other$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND"))
dogs_no_other$Group<-factor(dogs_no_other$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs_no_other, gp = gpar(fill = fillcolors2), tl_labels = c(TRUE, TRUE),direction = c("v", "h"), labeling = labeling_border(gp_labels = gpar(fontsize = 7),gp_varnames = gpar(fontsize = 9,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.7,0,0,2.4), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
# group the gods data to fulfill the zip_choropleth requirement
dogs_table<-dogs %>% select(zip_code,spayed_or_neutered)
dogs_table$spayed_or_neutered<-ifelse(dogs_table$spayed_or_neutered=='Yes',1,0)
dogs_summary<-dogs_table%>% group_by(zip_code) %>%summarise(total=sum(as.numeric(spayed_or_neutered)),n=n())
# calculate percentage
dogs_summary$value<-dogs_summary$total/dogs_summary$n
dogs_summary<-rename(dogs_summary,"region"="zip_code")
dogs_summary <- select(dogs_summary, -c("total","n"))
# change class
dogs_summary$region<-as.character(dogs_summary$region)
dogs_summary$value<-as.numeric(dogs_summary$value)
library(devtools)
library(choroplethr)
library(choroplethrZip)
nyc_fips = c("36005", "36047", "36061", "36081", "36085")
#a<-c(unlist(dogs_summary$region))
zip_choropleth(dogs_summary,county_zoom = nyc_fips,
title       = "Percent spayed or neutered dogs by zip code",
legend      = "Percentage")
library(tidyquant)
# set stock and dates
first.date <- '2015-01-01'
last.date <-  Sys.Date()
# get data with tq_get
apple_stock <- tq_get('AAPL',get = "stock.prices", from = first.date, to = last.date)
amazon_stock <- tq_get('AMZN',get = "stock.prices", from = first.date, to = last.date)
google_stock <- tq_get('GOOG',get = "stock.prices", from = first.date, to = last.date)
netflix_stock <- tq_get('NFLX',get = "stock.prices", from = first.date, to = last.date)
# tidy data
aagn =data.frame(date= apple_stock$date,apple=apple_stock$close , amazon=amazon_stock$close,google=google_stock$close,netflix=netflix_stock$close)
aagn_tidy<-aagn %>%gather(key,value, -date)
# plot line chart
ggplot(aagn_tidy,aes(x=date, y=value, colour=key)) + geom_line()+labs(title = "Closing price of four tech stocks,2015-1018", y = "Closing Price", x = "Date") + theme_tq(12)
aagn_scale <- aagn_tidy %>% group_by(key) %>%
mutate(index = round(100*value/value[1], 2)) %>%
ungroup()
# plot line chart
ggplot(aagn_scale,aes(x=date, y=index, colour=key)) + geom_line()+labs(title = "Scaled:closing price of four tech stocks,2015-2018", y = "Closing Price", x = "Date") + theme_tq(12)
library(scales)
dogs_ts<-dogs%>% group_by(year(dogs$birth)) %>%summarise(n=n())
dogs_ts<-rename(dogs_ts,"year"="year(dogs$birth)")
dogs_ts<-dogs_ts[which(dogs_ts$year>=2000 & dogs_ts$year<=2011),]
# plot line chart
ggplot(dogs_ts,aes(x=as.numeric(year), y=n)) + geom_line()+labs(title = "Total borned dogs in NYC with year,2000-2011", y ="Total amount", x = "") + scale_x_continuous(breaks=c(2000:2011),labels=c(2000:2011))+theme_bw(13)+ scale_y_continuous(labels = scientific)
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 8),gp_varnames = gpar(fontsize = 9,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 8),gp_varnames = gpar(fontsize = 1-,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 8),gp_varnames = gpar(fontsize = 10,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
dogs_no_other<-dogs[-c(which(!dogs$dominant_color %in% max_color)),]
fillcolors2 <- c("gray30","white","lightsalmon4","tan1","gold")
dogs_no_other$new_dominant_color<-factor(dogs_no_other$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND"))
dogs_no_other$Group<-factor(dogs_no_other$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs_no_other, gp = gpar(fill = fillcolors2), tl_labels = c(TRUE, TRUE),direction = c("v", "h"), labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.7,0,0,2.4), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 9.6),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(90, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("center", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1.5), pos_labels = c("right", "center", "left", "center")))
dogs_no_other<-dogs[-c(which(!dogs$dominant_color %in% max_color)),]
fillcolors2 <- c("gray30","white","lightsalmon4","tan1","gold")
dogs_no_other$new_dominant_color<-factor(dogs_no_other$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND"))
dogs_no_other$Group<-factor(dogs_no_other$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs_no_other, gp = gpar(fill = fillcolors2), tl_labels = c(TRUE, TRUE),direction = c("v", "h"), labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(30, 0, 0, 0), offset_varnames = c(0.7,0,0,2.4), offset_labels=c(0.5,0,0,1), pos_labels = c("center", "center", "left", "center")))
dogs_no_other<-dogs[-c(which(!dogs$dominant_color %in% max_color)),]
fillcolors2 <- c("gray30","white","lightsalmon4","tan1","gold")
dogs_no_other$new_dominant_color<-factor(dogs_no_other$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND"))
dogs_no_other$Group<-factor(dogs_no_other$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs_no_other, gp = gpar(fill = fillcolors2), tl_labels = c(TRUE, TRUE),direction = c("v", "h"), labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(0.7,0,0,2.4), offset_labels=c(0.5,0,0,1), pos_labels = c("center", "center", "left", "center")))
dogs_no_other<-dogs[-c(which(!dogs$dominant_color %in% max_color)),]
fillcolors2 <- c("gray30","white","lightsalmon4","tan1","gold")
dogs_no_other$new_dominant_color<-factor(dogs_no_other$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND"))
dogs_no_other$Group<-factor(dogs_no_other$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs_no_other, gp = gpar(fill = fillcolors2), tl_labels = c(TRUE, TRUE),direction = c("v", "h"), labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(0.7,0,0,2.4), offset_labels=c(0.5,0,0,1), pos_labels = c("right", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(0.8,0,0,2), offset_labels=c(0.5,0,0,1), pos_labels = c("right", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(1,0,0,2), offset_labels=c(0.5,0,0,1), pos_labels = c("right", "center", "left", "center")))
max_color<-c("BLACK","WHITE","BROWN","TAN","BLOND") #top 5 dominant colors
dogs$new_dominant_color<-dogs$dominant_color
dogs$new_dominant_color[which(!dogs$dominant_color %in% max_color)]<-"OTHER" #group the rest into an “OTHER” category
library(vcd)
library(grid) # needed for gpar
#library(RColorBrewer)
fillcolors <- c("gray30","white","lightsalmon4","tan1","gold","paleturquoise2") # give each label corresponding colors
dogs$new_dominant_color<-factor(dogs$new_dominant_color,levels= c( "BLACK", "WHITE", "BROWN", "TAN", "BLOND", "OTHER"))
dogs$Group<-factor(dogs$Group,levels=c("Mutt","Toy","Non-Sporting","Terrier","Sporting","Working","Hound","Herding"))
vcd::mosaic( new_dominant_color ~ Group, dogs, gp = gpar(fill = fillcolors), direction = c("v", "h"),tl_labels = c(TRUE, TRUE),labeling = labeling_border(gp_labels = gpar(fontsize = 10),gp_varnames = gpar(fontsize = 12,fontface = 2), rot_labels = c(45, 0, 0, 0), offset_varnames = c(0.6,0,0,2), offset_labels=c(0.5,0,0,1), pos_labels = c("right", "center", "left", "center")))
knitr::include_graphics("/Users/yawenhan/DesktopScreen Shot 2018-11-06 at 6.18.42 PM.png")
knitr::include_graphics("/Users/yawenhan/DesktopScreen Shot 2018-11-06 at 6.18.42 PM.png")
#knitr::include_graphics("/Users/yawenhan/DesktopScreen Shot 2018-11-06 at 6.18.42 PM.png")
![alt](/Users/yawenhan/DesktopScreen Shot 2018-11-06 at 6.18.42 PM.png)
#knitr::include_graphics("/Users/yawenhan/DesktopScreen Shot 2018-11-06 at 6.18.42 PM.png")
![alt](/Users/yawenhan/Desktop/Screen Shot 2018-11-06 at 6.18.42 PM.png)
knitr::include_graphics("/Users/yawenhan/Desktop/Screen Shot 2018-11-06 at 6.18.42 PM.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/01/png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/01.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/02.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/03.png")
inline equation: $A = \pi*r^{2}$
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/04.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/05.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/06.png")
data(AirPassengers)
class(AirPassengers)
#查看AirPassengers数据类型，这里是时间序列数据
start(AirPassengers)
#这个是Airpassengers数据开始的时间
end(AirPassengers)
#这个是Airpassengers数据开始的时间
end(AirPassengers)
frequency(AirPassengers)
#时间序列的频率是一年12个月
#矩阵中详细数据
summary(AirPassengers)
#绘制出时间序列
plot(AirPassengers)
#拟合一条直线
abline(reg=lm(AirPassengers~time(AirPassengers)))
#拟合一条直线
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
#打印每年的周期
cycle(AirPassengers)
#打印每年的周期
plot(aggregate(AirPassengers,FUN=mean))
#绘制盒图
boxplot(AirPassengers~cycle(AirPassengers))
#打印每年的周期
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/01.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/02.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/03.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/04.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/05.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/06.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/07.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/08.png")
data(AirPassengers)
class(AirPassengers)#查看AirPassengers数据类型，这里是时间序列数据
#这个是Airpassengers数据开始的时间
start(AirPassengers)
#这个是Airpassengers数据结束的时间
end(AirPassengers)
#时间序列的频率是一年12个月
frequency(AirPassengers)
#数据总结(five numbers)
summary(AirPassengers)
#绘制出时间序列
plot(AirPassengers)
#拟合一条直线
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
#打印每年的周期
cycle(AirPassengers)
#合并数据，绘制年趋势
plot(aggregate(AirPassengers,FUN=mean))
#绘制箱线图
boxplot(AirPassengers~cycle(AirPassengers))
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/09.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/10.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/11.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/12.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/13.png")
knitr::include_graphics("/Users/yawenhan/Desktop/Autumn2018/5702 EDAV/R tutorial/14.png")
library(tseries)
adf.test(diff(log(AirPassengers)), alternative="stationary", k=0)
acf(log(AirPassengers))
acf(diff(log(AirPassengers)))
fit <- arima(log(AirPassengers), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(AirPassengers,2.718^pred$pred, log = "y", lty = c(1,3))
data(trees)
pairs(trees,panel=panel.smooth)
pairs(log(trees),panel=panel.smooth)
knitr::opts_chunk$set(echo = TRUE)
data(trees)
pairs(trees,panel=panel.smooth)
pairs(log(trees),panel=panel.smooth)
attach(trees)
coplot(log(Volume)~log(Girth)|Height,panel=panel.smooth)
summary(fit <- glm(Volume~Girth+Height))
plot.glm.diag(fit)
library(MASS)
boxcox(fit)
summary(fit <- glm(log(Volume)~log(Girth)+log(Height)))
library(boot)
plot.glm.diag(fit)
detach("package:boot", unload=TRUE)
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
summary(fit <- glm(log(Volume)~log(Girth)+log(Height)))
library(boot)
plot.glm.diag(fit)
summary(fit <- glm(Girth~Volume+Height))
plot.glm.diag(fit)
library(MASS)
boxcox(fit)
summary(fit <- glm(Height~Volume+Girth))
plot.glm.diag(fit)
library(MASS)
boxcox(fit)
attach(burt)
load("~/Desktop/Autumn2018/5703 Inference&Modeling/Exercise/SMPracticals/data/burt.rda")
attach(burt)
par(pty="s")
plot(x,y,type="n",xlim=c(60,140),ylim=c(60,140))
text(x,y,class,cex=0.8)
abline(0,1,lty=2)
burt.glm <- glm(y~x*class,data=burt)
anova(burt.glm,test="F")
library(boot)
burt.diag <- glm.diag(burt.glm)
summary(fit <- glm(y~class+x:class-1))
summary(fit <- glm(y~x))
plot.glm.diag(fit)
setwd("~/Desktop/Spring 2019/ADS/01 R")
library(data.table)
dat <-fread(input ="simulated asthma data.csv")
dat <-fread(input ="simulated+asthma+data.csv")
print(dat)
dat[1:5,age]
dat[1:5,.(age)]
dat[1:5,.(id,age)]
dat[age=12]
dat[age=2]
dat[age=2,]
dat[age==2,]
dat[,.(median(median_age=age,na.rm=TRUE))]
dat[,.(median_agemedian(x=age,na.rm=TRUE))]
dat[,.(median_age=median(x=age,na.rm=TRUE))]
library(data.table)
dat <-fread(input ="simulated+asthma+data.csv")
print(dat)
##row
dat[age==2,]
##Column
dat[,.(median_age=median(x=age,na.rm=TRUE))]
##Column
dat[,age]
##Column
dat[1:5,age]
dat[1:5,.(age)]
dat[1:5,x=.(age)]
dat[1:5,.(x=age)]
dat[, takes_meds := 1*(inhaler ==1|controller ==1)]
View(dat)
##show column name
names(dat)
dat[,.N]
dat[, takes_meds :=NULL]
dat[,.N]
