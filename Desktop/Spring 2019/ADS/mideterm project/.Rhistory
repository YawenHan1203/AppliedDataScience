#set column names
setnames(dat.result,c("Model","Sample Size","Data","A","B","C","Points"))
#convert factor to numeric for columns "A","B","C","Points"
dat.result[, c("A","B","C","Points"):=lapply(X=.SD, as.character), .SDcols=c("A","B","C","Points")]
dat.result[, c("A","B","C","Points"):=lapply(X=.SD, as.numeric), .SDcols=c("A","B","C","Points")]
return (dat.result)
}
##Function used to calculate the score of fitted model
scoring.funnction <- function(sample.size, running.time, accuracy){
A <- sample.size/train.dat.size
B <- min(running.time/60.0, 1)
C <- 1-accuracy
score <- 0.25*A + 0.25*B +0.5*C
return (c(A,B,C,score))
}
library(randomForest)
#Function for RandomForest Model
random.forest <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N] #sample size
#RandomForest Model
start.time <- Sys.time()# record start time
model <- randomForest(formula = label~. , data = TrainSet)
# Predicting on Validation set
predTest <- predict(model, TestSet, type = "response")
end.time <- Sys.time()# record end time
running.time <- as.numeric(end.time - start.time)  # model running time
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
random.forest.result <- iteration.samples.each.model("random.forest")
# show as HTML table
datatable(random.forest.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(glmnet)
#Function for RidgeRegression Model
ridge.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#RidgeRegression Model
start.time <- Sys.time()# record start time
model <- cv.glmnet(x=data.matrix(TrainSet[,2:50]), y=TrainSet[,label], alpha=0,type.measure = "class",family="multinomial")
# Predicting on test set
predTest <- predict(model, data.matrix(TestSet[,2:50]), type="class", s="lambda.min")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
ridge.regression.result <- iteration.samples.each.model("ridge.regression")
# show as HTML table
datatable(ridge.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(e1071)
#Function for svm model
model.svm <-function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
start.time <-Sys.time() #record start time
#SVM model
mod.svm <-svm(label~.,data=TrainSet)
#Predicting on test set
predTest <-predict(mod.svm,newdata=TestSet[,2:50])
end.time <-Sys.time() #record end time
running.time <-as.numeric(end.time-start.time) #model running time
#Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#Calculate Score
score <-scoring.funnction(sample.size,running.time,accuracy)
return(score)
}
# get result table
svm.result <- iteration.samples.each.model("model.svm")
# show as HTML table
datatable(svm.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(caret)
install.packages("caret")
set.seed(72)
knitr::opts_chunk$set(echo = TRUE, comment="", warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=55))
library(data.table)
library(DT)
training.data.file <- "../Data/MNIST-fashion training set-49.csv"
testing.data.file <- "../Data/MNIST-fashion testing set-49.csv"
train.dat <- fread(input = training.data.file, verbose = FALSE)
test.dat <- fread(input = testing.data.file, verbose = FALSE)
n.values <- c(500, 1000, 2000)
iterations <- 3
train.dat.size <- train.dat[,.N]
#Function round numerical vars to required decimal
round.numerics <- function(x, digits){
if(is.numeric(x)){
x <- round(x = x, digits = digits)
}
return(x)
}
# Getting some random values to use here
find.sample.index <- function(train.dat, sample.size) {
index <- 1:train.dat[,.N]
sample1.index <- sample(x = index,size = sample.size,replace = FALSE)
# Remove the sampled items from the vector of values
sample2.index <- sample(x = index[-c(sample1.index)],size = sample.size,replace = FALSE)
# Another sample, and another removal
sample3.index <- sample(x = index[-c(sample1.index,sample2.index)],size = sample.size,replace = FALSE)
return(list(sample1.index,sample2.index,sample3.index))
}
#change the datatype of label column as factor
train.dat[,label:=factor(label)]
test.dat[,label:=factor(label)]
#iteration for all possible sample sizes
for (i in 1:iterations){
#call function  find.sample.index
#get sample indexes for three samples with required sample size
sample.index <- find.sample.index(train.dat, n.values[i])
#get three samples
for (j in 1:iterations){
#name with pattern
sample.name <- sprintf("dat_%d_%d", n.values[i], j)
#assign samples with names
assign(eval(sample.name), train.dat[unlist(sample.index[j]),])
}
}
# Function that iterate all sample sizes for the given model
# return a list and a datatable
iteration.samples.each.model <- function(model){
#initialize a list to store model results
ls = list()
#iterarte all samples
for (i in 1:iterations){
for (j in 1:iterations){
TrainSet <- sprintf("dat_%d_%d", n.values[i], j)
# call model function to compute score
score <- get(model)(get(TrainSet),test.dat)
ls[3*(i-1)+j] <- list(c(model,n.values[i],TrainSet,score))
}
}
#transform list of list to data.table
dat.result= setDT(as.data.frame(t(as.data.frame(ls))))
#set column names
setnames(dat.result,c("Model","Sample Size","Data","A","B","C","Points"))
#convert factor to numeric for columns "A","B","C","Points"
dat.result[, c("A","B","C","Points"):=lapply(X=.SD, as.character), .SDcols=c("A","B","C","Points")]
dat.result[, c("A","B","C","Points"):=lapply(X=.SD, as.numeric), .SDcols=c("A","B","C","Points")]
return (dat.result)
}
##Function used to calculate the score of fitted model
scoring.funnction <- function(sample.size, running.time, accuracy){
A <- sample.size/train.dat.size
B <- min(running.time/60.0, 1)
C <- 1-accuracy
score <- 0.25*A + 0.25*B +0.5*C
return (c(A,B,C,score))
}
library(randomForest)
#Function for RandomForest Model
random.forest <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N] #sample size
#RandomForest Model
start.time <- Sys.time()# record start time
model <- randomForest(formula = label~. , data = TrainSet)
# Predicting on Validation set
predTest <- predict(model, TestSet, type = "response")
end.time <- Sys.time()# record end time
running.time <- as.numeric(end.time - start.time)  # model running time
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
random.forest.result <- iteration.samples.each.model("random.forest")
# show as HTML table
datatable(random.forest.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(glmnet)
#Function for RidgeRegression Model
ridge.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#RidgeRegression Model
start.time <- Sys.time()# record start time
model <- cv.glmnet(x=data.matrix(TrainSet[,2:50]), y=TrainSet[,label], alpha=0,type.measure = "class",family="multinomial")
# Predicting on test set
predTest <- predict(model, data.matrix(TestSet[,2:50]), type="class", s="lambda.min")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
ridge.regression.result <- iteration.samples.each.model("ridge.regression")
# show as HTML table
datatable(ridge.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(e1071)
#Function for svm model
model.svm <-function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
start.time <-Sys.time() #record start time
#SVM model
mod.svm <-svm(label~.,data=TrainSet)
#Predicting on test set
predTest <-predict(mod.svm,newdata=TestSet[,2:50])
end.time <-Sys.time() #record end time
running.time <-as.numeric(end.time-start.time) #model running time
#Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#Calculate Score
score <-scoring.funnction(sample.size,running.time,accuracy)
return(score)
}
# get result table
svm.result <- iteration.samples.each.model("model.svm")
# show as HTML table
datatable(svm.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(caret)
#Function for knn model
model.knn <-function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
start.time <-Sys.time() #record the start time
ctrl <- trainControl(method="repeatedcv",repeats = 10)
knnFit <- train(label ~ ., data = TrainSet, method = "knn",
trControl = ctrl, preProcess = c("center","scale")) #tune the parameter k with 10-fold cross validation
predTest <-predict(knnFit, newdata = TestSet[,2:50]) #predict using the best k in knnFit
end.time <-Sys.time() #record the end time
running.time <-as.numeric(end.time-start.time)
#Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#Calculate Score
score <-scoring.funnction(sample.size,running.time,accuracy)
return(score)
}
# get result table
knn.result <- iteration.samples.each.model("model.knn")
# show as HTML table
datatable(knn.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(glmnet)
#Function for multinomial logistic regression model
model.multilogistic <-function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
X <-as.matrix(TrainSet[,2:50])
y <-as.matrix(TrainSet[,1])
test <-as.matrix(TestSet[,2:50])
start.time <-Sys.time() #record the start time
multilog <-glmnet(X, y,family = "multinomial")
#predict using multinomial logistic regression model
predTest <-predict(multilog,newx=test,type="class")
end.time <-Sys.time() #record the end time
running.time <-as.numeric(end.time-start.time) #model running time
#Checking classification accuracy using the cross validated best column of prediction
accuracy <-mean(predTest[,ncol(predTest)]== TestSet[,label])
#Calculate Score
score <-scoring.funnction(sample.size,running.time,accuracy)
return(score)
}
# get result table
multilogistic.result <- iteration.samples.each.model("model.multilogistic")
# show as HTML table
datatable(multilogistic.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
# datatable summarize all the models reults
all.model.result <- rbind(random.forest.result,ridge.regression.result,boosted.regression.result,svm.result,knn.result,multilogistic.result)
datatable(all.model.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
# score board that average the samples with same size and model
score.board<-all.model.result[,.(A=mean(A),B=mean(B),C=mean(C),Points=mean(Points)),by=c("Model","Sample Size")]
# sort points in increasing order
setorder(score.board, Points)
datatable(score.board[, lapply(X=.SD, FUN="round.numerics",digits=4)])
boosted.regression(dat_2000_2,test.dat)
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
print (predTest)
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
boosted.regression(dat_2000_2,test.dat)
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
print (predTest)
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
boosted.regression(dat_2000_2,test.dat)
predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest<-predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
TrainSet<-dat_2000_2
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=test.dat, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest
predTest <- sub(".100","",x=predTest)
predTest
mean(predTest == test.dat[,label])
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
print (predTest)
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
print (predTest)
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
boosted.regression(dat_2000_2,TestSet)
boosted.regression(dat_2000_2,test.dat)
library(gbm)
#Function for BoostedRegression Model
boosted.regression <- function(TrainSet,TestSet){
sample.size <- TrainSet[,.N]
#BoostedRegression Model
start.time <- Sys.time()# record start time
# fit BoostedRegression Model
model <- gbm(label ~ ., data=TrainSet, distribution="multinomial", cv.folds=5)
# Predicting on test set
predTest <- predict(model, newdata=TestSet, n.trees=100, type = "response")
#print (predTest)
end.time <- Sys.time()# record end tiime
running.time <- as.numeric(end.time-start.time) # model running time
predTest <- setDT(as.data.frame(predTest))
predTest <- predTest[, colnames(.SD)[max.col(.SD, ties.method = "first")]]
predTest <- sub(".100","",x=predTest)# remove pattern
# Checking classification accuracy
accuracy <- mean(predTest == TestSet[,label])
#calculate score of fitted model
score <- scoring.funnction(sample.size, running.time, accuracy)
return (score)
}
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
boosted.regression(dat_2000_2,test.dat)
# get result table
boosted.regression.result <- iteration.samples.each.model("boosted.regression")
# show as HTML table
datatable(boosted.regression.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
# datatable summarize all the models reults
all.model.result <- rbind(random.forest.result,ridge.regression.result,boosted.regression.result,svm.result,knn.result,multilogistic.result)
datatable(all.model.result[, lapply(X=.SD, FUN="round.numerics",digits=4)])
# score board that average the samples with same size and model
score.board<-all.model.result[,.(A=mean(A),B=mean(B),C=mean(C),Points=mean(Points)),by=c("Model","Sample Size")]
# sort points in increasing order
setorder(score.board, Points)
datatable(score.board[, lapply(X=.SD, FUN="round.numerics",digits=4)])
