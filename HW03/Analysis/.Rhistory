dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
View(aggregated.awareness)
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
View(aggregated.awareness.test)
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables]
View(respondents.vars.for.model)
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
View(model.vars)
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names = c("AggregatedAwareness"), model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names = "AggregatedAwareness", model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names = age.name, model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =gender.name, model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",lapply(X=.SD,FUN=function(x){x}),.SDcols=respondent.variables,by=id.name]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =gender.name, model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",by=id.name]
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",,by=id.name]
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =gender.name, model.type = "logistic")
#output the results in a datatable
datatable(data = res)
respondent.variables
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("AggregatedAwareness",respondent.variables)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =input.vars, model.type = "logistic")
c("AggregatedAwareness",respondent.variables)
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("Aggregated Awareness"",respondent.variables)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =input.vars, model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Aggregated Awareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("Aggregated Awareness",respondent.variables)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =input.vars, model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("AggregatedAwareness",respondent.variables)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =input.vars, model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("AggregatedAwareness",gender.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =input.vars, model.type = "logistic")
class(aggregated.awareness$AggregatedAwareness)
input.vars
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
#aggregated.awareness.test<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("AggregatedAwareness",gender.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names ="AggregatedAwareness", model.type = "logistic")
# get the aggregated awareness for all the products expect for Buzzdial
#aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness, y=respondents.vars.for.model, by=id.name)
input.vars <- c("Mean",gender.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names ="AggregatedAwareness", model.type = "logistic")
View(aggregated.awareness)
# get the aggregated awareness for all the products expect for Buzzdial
#aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
aggregated.awareness.for.model<-dat[get(product.name)!="Buzzdial",.("Mean"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness.for.model, y=respondents.vars.for.model, by=id.name)
input.vars <- c("Mean",gender.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names ="AggregatedAwareness", model.type = "logistic")
View(model.vars)
View(aggregated.awareness.for.model)
View(respondents.vars.for.model)
# get the aggregated awareness for all the products expect for Buzzdial
#aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
aggregated.awareness.for.model<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness.for.model, y=respondents.vars.for.model, by=id.name)
input.vars <- c("AggregatedAwareness",gender.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names ="AggregatedAwareness", model.type = "logistic")
#output the results in a datatable
datatable(data = res)
# get the aggregated awareness for all the products expect for Buzzdial
#aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
aggregated.awareness.for.model<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=mean(get(awareness.name),na.rm=TRUE)),by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- dat[get(product.name)=="Buzzdial",]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.awareness.for.model, y=respondents.vars.for.model, by=id.name)
input.vars <- c("AggregatedAwareness", gender.name)
# fit the model
res <- fit.model(dt = model.vars, outcome.name = awareness.name, input.names =input.vars, model.type = "logistic")
#output the results in a datatable
datatable(data = res)
outcome.by.respondents.model <- function(input.table,input.product,input.outcome){
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.outcome.for.model<-input.table[get(product.name)!=input.product,.("AggregatedOutcome"=mean(get(input.outcome),na.rm=TRUE)),by=id.name]
#aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedAwareness"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- input.table[get(product.name)==input.product,]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.outcome.for.model, y=respondents.vars.for.model, by=id.name)
#input variables
input.vars <- c("AggregatedOutcome", respondent.variables)
#select model type: linear for satisfaction, logistic for others
if(input.outcome == satisfaction.name){
model.type <- "linear"
}
if(input.outcome != satisfaction.name){
model.type <- "logistic"
}
# fit the model
res <- fit.model(dt = model.vars, outcome.name = input.outcome, input.names =input.vars, model.type = model.type)
#output the results in a datatable
datatable(data = res)
}
outcome.by.respondents.model(input.table=dat,input.product="Buzzdial",input.outcome = awareness.name)
#call function outcome.by.respondents.model
outcome.by.respondents.model(input.table=dat,input.product="Buzzdial",input.outcome = satisfaction.name)
library(knitr)
opts_chunk$set(echo = TRUE, eval = TRUE, comment="", warning = FALSE, message = FALSE, tidy.opts=list(width.cutoff=55), tidy = TRUE, fig.width = 6, fig.height = 6)
library(Hmisc)
library(DT)
library(data.table)
dat <- fread(input = "../Data/Homework 3 Data.csv", verbose = FALSE)
num.lines <- 20
question.counter = 0
id.name <- "id"
age.name <- "Age"
gender.name <- "Gender"
income.name <- "Income"
region.name <- "Region"
persona.name <- "Persona"
product.name <- "Product"
awareness.name <- "Awareness"
consideration.name <- "Consideration"
consumption.name <- "Consumption"
satisfaction.name <- "Satisfaction"
advocacy.name <- "Advocacy"
pattern.bp <- "BP_"
age.group.name <- "Age Group"
income.group.name <- "Income Group"
cuts.age <- c(18, 35, 50, 65, 120)
cuts.income <- 1000* c(0, 50, 75, 100, 150, 250)
dat[, eval(age.group.name) := cut2(x = get(age.name), cuts = cuts.age)]
dat[, eval(income.group.name) := cut2(x = get(income.name), cuts = cuts.income)]
dat[, eval(satisfaction.name) := get(satisfaction.name)/10]
unique.age.groups <- dat[, unique(get(age.group.name))]
unique.genders <- dat[, unique(get(gender.name))]
unique.income.groups <- dat[, unique(get(income.group.name))]
unique.regions <- dat[, unique(get(region.name))]
unique.personas <- dat[, unique(get(persona.name))]
unique.products <- dat[, unique(get(product.name))]
num.products <- length(unique.products)
respondent.variables <- c(age.group.name, gender.name, income.group.name, region.name, persona.name)
states.of.engagement <- c(awareness.name, consideration.name, consumption.name, satisfaction.name, advocacy.name)
bp.traits <- names(dat)[grep(pattern = pattern.bp, x = names(dat))]
percentage.table <- function(x, digits = 1){
tab <- table(x)
percentage.tab <- 100*tab/(sum(tab))
rounded.tab <- round(x = percentage.tab, digits = digits)
return(rounded.tab)
}
round.numerics <- function(x, digits){
if(is.numeric(x)){
x <- round(x = x, digits = digits)
}
return(x)
}
mean.diff <- function(x, y){
return(mean(x, na.rm=TRUE) - mean(y, na.rm=TRUE))
}
engagement.model <- function(dt, outcome.name, input.names, model.type){
res <- fit.model(dt = dt, outcome.name = outcome.name, input.names = input.names, model.type = model.type)
return(res)
}
fit.model <- function(dt, outcome.name, input.names, model.type, digits = 3){
the.formula <- reduce.formula(dt = dt, outcome.name = outcome.name, input.names = input.names)
if(model.type == "logistic"){
mod <- glm(formula = the.formula, family = "binomial", data = dt)
mod.summary <- logistic.regression.summary(glm.mod = mod, digits = digits)
}
if(model.type == "linear"){
mod <- lm(formula = the.formula, data = dt)
mod.summary <- linear.regression.summary(lm.mod = mod, digits = digits)
}
mod.summary.rounded <- mod.summary[, lapply(X = .SD, FUN = "round.numerics", digits = digits)]
return(mod.summary.rounded)
}
logistic.regression.summary <- function(glm.mod, digits = 3){
library(data.table)
glm.coefs <- as.data.table(summary(glm.mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1-alpha/2, mean = 0, sd = 1)
glm.coefs[, Odds.Ratio := exp(Estimate)]
glm.coefs[, OR.Lower.95 := exp(Estimate - z * `Std. Error`)]
glm.coefs[, OR.Upper.95 := exp(Estimate + z * `Std. Error`)]
return(glm.coefs[])
}
linear.regression.summary <- function(lm.mod, digits = 3){
library(data.table)
lm.coefs <- as.data.table(summary(lm.mod)$coefficients, keep.rownames = TRUE)
alpha = 0.05
z <- qnorm(p = 1-alpha/2, mean = 0, sd = 1)
lm.coefs[, Coef.Lower.95 := Estimate - z * `Std. Error`]
lm.coefs[, Coef.Upper.95 := Estimate + z * `Std. Error`]
return(lm.coefs)
}
create.formula <- function(outcome.name, input.names, input.patterns = NA, all.data.names = NA, return.as = "character"){
variable.names.from.patterns <- c()
if(!is.na(input.patterns[1]) & !is.na(all.data.names[1])){
pattern <- paste(input.patterns, collapse = "|")
variable.names.from.patterns <- all.data.names[grep(pattern = pattern, x = all.data.names)]
}
all.input.names <- unique(c(input.names, variable.names.from.patterns))
all.input.names <- all.input.names[all.input.names != outcome.name]
if(!is.na(all.data.names[1])){
all.input.names <- all.input.names[all.input.names %in% all.data.names]
}
input.names.delineated <- sprintf("`%s`", all.input.names)
the.formula <- sprintf("`%s` ~ %s", outcome.name, paste(input.names.delineated, collapse = "+"))
if(return.as == "formula"){
return(as.formula(the.formula))
}
if(return.as != "formula"){
return(the.formula)
}
}
reduce.formula <- function(dt, outcome.name, input.names, input.patterns = NA, max.input.categories = 20, max.outcome.categories.to.search = 4, return.as = "formula"){
require(data.table)
dt <- setDT(dt)
if(!(outcome.name %in% names(dt))){
return("Error:  outcome.name is not in names(dt).")
}
pattern.names <- list()
if(!is.na(input.patterns[1])){
for(i in 1:length(input.patterns)){
pattern.names[[i]] <- names(dt)[grep(pattern = input.patterns[i], x = names(dt))]
}
}
all.input.names <- c(input.names, as.character(pattern.names))
num.outcome.categories <- dt[!is.na(get(outcome.name)), length(unique(get(outcome.name)))]
if(num.outcome.categories <= max.outcome.categories.to.search){
num.unique.tab <- dt[, lapply(X = .SD, FUN = function(x){return(length(unique(x[!is.na(x)])))}), .SDcols = input.names, by = outcome.name]
min.categories.tab <- num.unique.tab[, lapply(X = .SD, FUN = "min"), .SDcols = input.names]
reduced.inputs <- names(min.categories.tab)[min.categories.tab >= 2]
}
if(num.outcome.categories > max.outcome.categories.to.search){
reduced.inputs <- all.input.names
}
the.formula <- create.formula(outcome.name = outcome.name, input.names = reduced.inputs, all.data.names = names(dt), input.patterns = NA, return.as = return.as)
return(the.formula)
}
add.backtick <- function(x, include.backtick = "as.needed"){
if(include.backtick == "all"){
w <- 1:length(x)
}
if(include.backtick == "as.needed"){
w <- grep(pattern = " ", x = x, fixed = TRUE)
}
if(length(w) > 0){
x[w] <- sprintf("`%s`", x[w])
}
return(x)
}
create.formula <- function(outcome.name, input.names, input.patterns = NA, all.data.names = NA, include.backtick = "as.needed", return.as = "formula"){
variable.names.from.patterns <- c()
if(!is.na(input.patterns[1]) & !is.na(all.data.names[1])){
pattern <- paste(input.patterns, collapse = "|")
variable.names.from.patterns <- all.data.names[grep(pattern = pattern, x = all.data.names)]
}
all.input.names <- unique(c(input.names, variable.names.from.patterns))
all.input.names <- all.input.names[all.input.names != outcome.name]
if(!is.na(all.data.names[1])){
all.input.names <- all.input.names[all.input.names %in% all.data.names]
}
input.names.delineated <- add.backtick(x =  all.input.names, include.backtick = include.backtick)
outcome.name.delineated <- add.backtick(x = outcome.name, include.backtick = include.backtick)
the.formula <- sprintf("%s ~ %s", outcome.name.delineated, paste(input.names.delineated, collapse = "+"))
if(return.as == "formula"){
return(as.formula(the.formula))
}
if(return.as != "formula"){
return(the.formula)
}
}
library(DT)
sampled.rows <- sample(x = 1:dat[, .N], size = num.lines, replace = FALSE)
datatable(data = dat[sampled.rows,], rownames = FALSE)
question.counter <- question.counter + 1
# define the respondents_plot function
respondents_plot <- function(input.table,input.respondent_variable,input.respondent_show_percentages,rotation){
tab <- percentage.table(x = input.table[get(product.name) == get(product.name)[1], get(input.respondent_variable)])
table<-as.data.table(tab)
# barplot
barplot(height = unlist(table[,2]), names.arg = unlist(table[, 1]), space=0.01, las = 1, main = input.respondent_variable, ylab = "Percentage", ylim = c(-18, 1.2*max(tab, na.rm = TRUE)), col = "dodgerblue", xaxt = "n", axes = F)
#xlabel
text(x = -0.3 + 1.02*1:table[, .N], y = -2, labels = unlist(table[, 1]), srt = rotation, pos = 2, cex=0.8)
# checkbox for percentage display
if(input.respondent_show_percentages == TRUE){
space_val = 0
text(x = -0.4 + 1:length(tab) * (1+space_val), y = tab, labels = sprintf("%.1f%%", tab), pos = 3,cex=0.8)
}
}
# call the respondents_plot function
respondents_plot(input.table=dat,input.respondent_variable=age.group.name,input.respondent_show_percentages=TRUE,rotation=0)
#test <- as.data.frame(dat[,.SD[1],by=id.name,.SDcols=persona.name])
#ggplot(test,aes(test$Persona))+geom_bar(stat = "count")
# call the respondents_plot function
respondents_plot(input.table=dat,input.respondent_variable=gender.name,input.respondent_show_percentages=TRUE,rotation =0)
# call the respondents_plot function
respondents_plot(input.table=dat,input.respondent_variable=income.group.name,input.respondent_show_percentages=TRUE,rotation=45)
# call the respondents_plot function
respondents_plot(input.table=dat,input.respondent_variable=region.name,input.respondent_show_percentages=TRUE,rotation=0)
# call the respondents_plot function
respondents_plot(input.table=dat,input.respondent_variable=persona.name,input.respondent_show_percentages=TRUE,rotation=70)
question.counter <- question.counter + 1
# define the function to plot the engagement by respond variable
engagement.by.var.plot <- function(input.table,input.em_state){
#order the products by their outcomes percentage in descending order
setorderv(x = input.table, cols = "Mean", order = -1)
#barplot
barplot(height = input.table[1:5,  Mean], names.arg = input.table[1:5, get(product.name)], space=0.01, las = 1, main = input.em_state, ylab = sprintf("Rate of %s", input.em_state), ylim = c(-35, 110), xaxt = "n", axes = F, col = "dodgerblue")
axis(side = 2, at = 20*(0:5), las = 2)
#xlabel
text(x = -0.2 + 1.02*1:input.table[1:5, .N], y = -2, labels = input.table[1:5, get(product.name)], pos = 2,cex=0.9,srt=60)
# checkbox for percentage display
text(x = -0.5 + 1:input.table[1:5, .N], y = 1+input.table[1:5, Mean], labels = sprintf("%.1f%%", input.table[1:5, Mean]), pos = 3)
}
# subset table
awareness.by.region<-dat[get(region.name)=="Northeast", .("Mean"=100*mean(get(awareness.name),na.rm=TRUE)), by=product.name]
# call function engagement.by.var.plot
engagement.by.var.plot(input.table=awareness.by.region,input.em_state=awareness.name)
# subset table
advocacy.by.gender.income<-dat[get(gender.name)=="Female" & get(income.group.name) %in% unique.income.groups[3:4], .("Mean"=100*mean(get(advocacy.name),na.rm=TRUE)), by=product.name]
# call function engagement.by.var.plot
engagement.by.var.plot(input.table=advocacy.by.gender.income,input.em_state=advocacy.name)
question.counter <- question.counter + 1
# get the mean score per product per bracd_perceptions
mean_scores <- dat[, lapply(X=.SD,FUN="mean",na.rm=TRUE),.SDcols=bp.traits, by=product.name]
# invert the negative perceptions
mean_scores[,eval(bp.traits[9:12]):=lapply(X=.SD,FUN=function(x){10-x}),.SDcols=bp.traits[9:12]]
# aggregate all perceptions per product as mean value
mean_scores[, "Aggregate_score" := rowMeans(.SD), .SDcols = bp.traits]
# order the products by their outcomes percentage in descending order
setorderv(x = mean_scores, cols = "Aggregate_score", order = -1)
# barplot
barplot(height = mean_scores[1:5,  Aggregate_score], names.arg = mean_scores[1:5, get(product.name)], space=0.01, las = 1, main = sprintf("Overall Avergae Perception"), ylab = sprintf("Avg Perception"), ylim = c(-5, 10), xaxt = "n", axes = F, col = "dodgerblue")
axis(side = 2, at = 2*(0:4), las = 2)
#xlabel
text(x = -0.3 + 1.02*1:mean_scores[1:5, .N], y = -0.5, labels = mean_scores[1:5, get(product.name)], srt = 50, pos = 2,cex=0.9)
# checkbox for percentage display
text(x = -0.4 + 1:mean_scores[1:5, .N], y = mean_scores[1:5, Aggregate_score], labels = sprintf("%.1f", mean_scores[1:5, Aggregate_score]), pos = 3)
question.counter <- question.counter + 1
outcome.gaps.diff <- function(input.first_outcome,input.second_outcome){
# get the mean score per product per bracd_perceptions
mean_outcomes <- dat[,         lapply(X=.SD,FUN="mean",na.rm=TRUE),.SDcols=states.of.engagement, by=product.name]
# chang the scale of difference as 0-100
mean_outcomes[, eval(states.of.engagement):=lapply(X=.SD,FUN=function(x){100*x}), .SDcols=states.of.engagement]
# get the difference
mean_outcomes[,"Outcomes_diff":=get(input.first_outcome)-get(input.second_outcome)]
# order the products by their outcomes difference in descending order
setorderv(x = mean_outcomes, cols = "Outcomes_diff", order = -1)
# barplot
barplot(height = mean_outcomes[1:5,  Outcomes_diff], names.arg = mean_outcomes[1:5, get(product.name)], space=0.01, las = 1, main = paste0("Difference between ", input.first_outcome, " and ", input.second_outcome), ylab = sprintf("Outcomes Difference"), ylim = c(-20, 80), xaxt = "n", axes = F, col = "dodgerblue")
axis(side = 2, at = 20*(0:4), las = 2)
#xlabel
text(x = -0.22+ 1.05*1:mean_outcomes[1:5, .N], y = -2, labels = mean_outcomes[1:5, get(product.name)], srt = 45, pos = 2,cex=0.9)
# checkbox for percentage display
text(x = -0.5 + 1:mean_outcomes[1:5, .N], y = 5+mean_outcomes[1:5, Outcomes_diff], labels = sprintf("%.1f%%", mean_outcomes[1:5, Outcomes_diff]),cex=0.9)
}
# call the function outcome.gaps.diff
outcome.gaps.diff(consumption.name,awareness.name)
# call the function outcome.gaps.diff
outcome.gaps.diff(awareness.name,satisfaction.name)
question.counter <- question.counter + 1
#define function outcome.by.respondents.model
outcome.by.respondents.model <- function(input.table,input.product,input.outcome){
# get the aggregated awareness for all the products expect for Buzzdial
aggregated.outcome.for.model<-input.table[get(product.name)!=input.product,.("AggregatedEngagement"=mean(get(input.outcome),na.rm=TRUE)),by=id.name]
#aggregated.awareness<-dat[get(product.name)!="Buzzdial",.("AggregatedEngagement"=lapply(X=.SD,FUN="mean",na.rm=TRUE)),.SDcols=awareness.name,by=id.name]
# get the respondents variables for Buzzdial
respondents.vars.for.model <- input.table[get(product.name)==input.product,]
#merge aggregated.awareness and respondents.vars.for.model
model.vars <- merge(x=aggregated.outcome.for.model, y=respondents.vars.for.model, by=id.name)
#input variables
input.vars <- c("AggregatedEngagement", respondent.variables)
#select model type: linear for satisfaction, logistic for others
if(input.outcome == satisfaction.name){
model.type <- "linear"
}
if(input.outcome != satisfaction.name){
model.type <- "logistic"
}
# fit the model
res <- fit.model(dt = model.vars, outcome.name = input.outcome, input.names =input.vars, model.type = model.type)
#output the results in a datatable
datatable(data = res)
}
#call function outcome.by.respondents.model
outcome.by.respondents.model(input.table=dat,input.product="Buzzdial",input.outcome = awareness.name)
#call function outcome.by.respondents.model
outcome.by.respondents.model(input.table=dat,input.product="Buzzdial",input.outcome = satisfaction.name)
